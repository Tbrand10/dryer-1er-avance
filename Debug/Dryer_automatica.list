
Dryer_automatica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  08004dd4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004dd4  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df21  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000201d  00000000  00000000  0002dff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00030010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000983  00000000  00000000  00030c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c02  00000000  00000000  000315e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103f7  00000000  00000000  000571e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c6a  00000000  00000000  000675dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003720  00000000  00000000  00150248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00153968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c80 	.word	0x08004c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004c80 	.word	0x08004c80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f023 030f 	bic.w	r3, r3, #15
 800057c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005ac:	f107 0208 	add.w	r2, r7, #8
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2304      	movs	r3, #4
 80005b6:	214e      	movs	r1, #78	; 0x4e
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <lcd_send_cmd+0x5c>)
 80005ba:	f001 fac1 	bl	8001b40 <HAL_I2C_Master_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000007c 	.word	0x2000007c

080005cc <lcd_send_data>:

void lcd_send_data (char data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f023 030f 	bic.w	r3, r3, #15
 80005dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	f043 030d 	orr.w	r3, r3, #13
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f043 0309 	orr.w	r3, r3, #9
 8000608:	b2db      	uxtb	r3, r3
 800060a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800060c:	f107 0208 	add.w	r2, r7, #8
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2304      	movs	r3, #4
 8000616:	214e      	movs	r1, #78	; 0x4e
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <lcd_send_data+0x5c>)
 800061a:	f001 fa91 	bl	8001b40 <HAL_I2C_Master_Transmit>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000007c 	.word	0x2000007c

0800062c <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f000 f81e 	bl	800067c <lcd_put_cur>
	lcd_send_string(string);
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f000 f877 	bl	8000734 <lcd_send_string>
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <lcd_clear>:

void lcd_clear (void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000654:	2080      	movs	r0, #128	; 0x80
 8000656:	f7ff ff89 	bl	800056c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e005      	b.n	800066c <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000660:	2020      	movs	r0, #32
 8000662:	f7ff ffb3 	bl	80005cc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b45      	cmp	r3, #69	; 0x45
 8000670:	ddf6      	ble.n	8000660 <lcd_clear+0x12>
	}
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
    switch (row)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <lcd_put_cur+0x18>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d005      	beq.n	800069e <lcd_put_cur+0x22>
 8000692:	e009      	b.n	80006a8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	603b      	str	r3, [r7, #0]
            break;
 800069c:	e004      	b.n	80006a8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006a4:	603b      	str	r3, [r7, #0]
            break;
 80006a6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5d 	bl	800056c <lcd_send_cmd>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <lcd_init>:


void lcd_init (void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006be:	2032      	movs	r0, #50	; 0x32
 80006c0:	f000 febe 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006c4:	2030      	movs	r0, #48	; 0x30
 80006c6:	f7ff ff51 	bl	800056c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006ca:	2005      	movs	r0, #5
 80006cc:	f000 feb8 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006d0:	2030      	movs	r0, #48	; 0x30
 80006d2:	f7ff ff4b 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 feb2 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006dc:	2030      	movs	r0, #48	; 0x30
 80006de:	f7ff ff45 	bl	800056c <lcd_send_cmd>
	HAL_Delay(10);
 80006e2:	200a      	movs	r0, #10
 80006e4:	f000 feac 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006e8:	2020      	movs	r0, #32
 80006ea:	f7ff ff3f 	bl	800056c <lcd_send_cmd>
	HAL_Delay(10);
 80006ee:	200a      	movs	r0, #10
 80006f0:	f000 fea6 	bl	8001440 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006f4:	2028      	movs	r0, #40	; 0x28
 80006f6:	f7ff ff39 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fea0 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000700:	2008      	movs	r0, #8
 8000702:	f7ff ff33 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fe9a 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ff2d 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fe94 	bl	8001440 <HAL_Delay>
	HAL_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fe91 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800071e:	2006      	movs	r0, #6
 8000720:	f7ff ff24 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 fe8b 	bl	8001440 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800072a:	200c      	movs	r0, #12
 800072c:	f7ff ff1e 	bl	800056c <lcd_send_cmd>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800073c:	e006      	b.n	800074c <lcd_send_string+0x18>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff40 	bl	80005cc <lcd_send_data>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f4      	bne.n	800073e <lcd_send_string+0xa>
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Keypad_Get_Char>:
                         {'4','5','6','B'},
                         {'7','8','9','C'},
                         {'*','0','#','D'}};

char Keypad_Get_Char(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	val_key = 0;
 8000764:	4bd5      	ldr	r3, [pc, #852]	; (8000abc <Keypad_Get_Char+0x35c>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	48d3      	ldr	r0, [pc, #844]	; (8000ac0 <Keypad_Get_Char+0x360>)
 8000772:	f001 f931 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f001 f92a 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f001 f923 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	48cb      	ldr	r0, [pc, #812]	; (8000ac4 <Keypad_Get_Char+0x364>)
 8000798:	f001 f91e 	bl	80019d8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	48c8      	ldr	r0, [pc, #800]	; (8000ac0 <Keypad_Get_Char+0x360>)
 80007a0:	f001 f902 	bl	80019a8 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d110      	bne.n	80007cc <Keypad_Get_Char+0x6c>
		HAL_Delay(4);
 80007aa:	2004      	movs	r0, #4
 80007ac:	f000 fe48 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 80007b0:	bf00      	nop
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	48c2      	ldr	r0, [pc, #776]	; (8000ac0 <Keypad_Get_Char+0x360>)
 80007b6:	f001 f8f7 	bl	80019a8 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0f8      	beq.n	80007b2 <Keypad_Get_Char+0x52>
		HAL_Delay(4);
 80007c0:	2004      	movs	r0, #4
 80007c2:	f000 fe3d 	bl	8001440 <HAL_Delay>
		val_key = keys[0][0];
 80007c6:	2231      	movs	r2, #49	; 0x31
 80007c8:	4bbc      	ldr	r3, [pc, #752]	; (8000abc <Keypad_Get_Char+0x35c>)
 80007ca:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f001 f8e9 	bl	80019a8 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d111      	bne.n	8000800 <Keypad_Get_Char+0xa0>
		HAL_Delay(4);
 80007dc:	2004      	movs	r0, #4
 80007de:	f000 fe2f 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80007e2:	bf00      	nop
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f001 f8dd 	bl	80019a8 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0f7      	beq.n	80007e4 <Keypad_Get_Char+0x84>
		HAL_Delay(4);
 80007f4:	2004      	movs	r0, #4
 80007f6:	f000 fe23 	bl	8001440 <HAL_Delay>
		val_key = keys[0][1];
 80007fa:	2232      	movs	r2, #50	; 0x32
 80007fc:	4baf      	ldr	r3, [pc, #700]	; (8000abc <Keypad_Get_Char+0x35c>)
 80007fe:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f001 f8cf 	bl	80019a8 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d111      	bne.n	8000834 <Keypad_Get_Char+0xd4>
		HAL_Delay(4);
 8000810:	2004      	movs	r0, #4
 8000812:	f000 fe15 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000816:	bf00      	nop
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f001 f8c3 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f7      	beq.n	8000818 <Keypad_Get_Char+0xb8>
		HAL_Delay(4);
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fe09 	bl	8001440 <HAL_Delay>
		val_key = keys[0][2];
 800082e:	2233      	movs	r2, #51	; 0x33
 8000830:	4ba2      	ldr	r3, [pc, #648]	; (8000abc <Keypad_Get_Char+0x35c>)
 8000832:	701a      	strb	r2, [r3, #0]
	}
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000834:	2120      	movs	r1, #32
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f001 f8b5 	bl	80019a8 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d111      	bne.n	8000868 <Keypad_Get_Char+0x108>
		HAL_Delay(4);
 8000844:	2004      	movs	r0, #4
 8000846:	f000 fdfb 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800084a:	bf00      	nop
 800084c:	2120      	movs	r1, #32
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f001 f8a9 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f7      	beq.n	800084c <Keypad_Get_Char+0xec>
		HAL_Delay(4);
 800085c:	2004      	movs	r0, #4
 800085e:	f000 fdef 	bl	8001440 <HAL_Delay>
		val_key = keys[0][3];
 8000862:	2241      	movs	r2, #65	; 0x41
 8000864:	4b95      	ldr	r3, [pc, #596]	; (8000abc <Keypad_Get_Char+0x35c>)
 8000866:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4894      	ldr	r0, [pc, #592]	; (8000ac0 <Keypad_Get_Char+0x360>)
 8000870:	f001 f8b2 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f001 f8ab 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 f8a4 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	488b      	ldr	r0, [pc, #556]	; (8000ac4 <Keypad_Get_Char+0x364>)
 8000896:	f001 f89f 	bl	80019d8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4888      	ldr	r0, [pc, #544]	; (8000ac0 <Keypad_Get_Char+0x360>)
 800089e:	f001 f883 	bl	80019a8 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d110      	bne.n	80008ca <Keypad_Get_Char+0x16a>
		HAL_Delay(4);
 80008a8:	2004      	movs	r0, #4
 80008aa:	f000 fdc9 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80008ae:	bf00      	nop
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4883      	ldr	r0, [pc, #524]	; (8000ac0 <Keypad_Get_Char+0x360>)
 80008b4:	f001 f878 	bl	80019a8 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f8      	beq.n	80008b0 <Keypad_Get_Char+0x150>
		HAL_Delay(4);
 80008be:	2004      	movs	r0, #4
 80008c0:	f000 fdbe 	bl	8001440 <HAL_Delay>
		val_key = keys[1][0];
 80008c4:	2234      	movs	r2, #52	; 0x34
 80008c6:	4b7d      	ldr	r3, [pc, #500]	; (8000abc <Keypad_Get_Char+0x35c>)
 80008c8:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f001 f86a 	bl	80019a8 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d111      	bne.n	80008fe <Keypad_Get_Char+0x19e>
		HAL_Delay(4);
 80008da:	2004      	movs	r0, #4
 80008dc:	f000 fdb0 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80008e0:	bf00      	nop
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f001 f85e 	bl	80019a8 <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f7      	beq.n	80008e2 <Keypad_Get_Char+0x182>
		HAL_Delay(4);
 80008f2:	2004      	movs	r0, #4
 80008f4:	f000 fda4 	bl	8001440 <HAL_Delay>
		val_key = keys[1][1];
 80008f8:	2235      	movs	r2, #53	; 0x35
 80008fa:	4b70      	ldr	r3, [pc, #448]	; (8000abc <Keypad_Get_Char+0x35c>)
 80008fc:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f001 f850 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d111      	bne.n	8000932 <Keypad_Get_Char+0x1d2>
		HAL_Delay(4);
 800090e:	2004      	movs	r0, #4
 8000910:	f000 fd96 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000914:	bf00      	nop
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f001 f844 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f7      	beq.n	8000916 <Keypad_Get_Char+0x1b6>
		HAL_Delay(4);
 8000926:	2004      	movs	r0, #4
 8000928:	f000 fd8a 	bl	8001440 <HAL_Delay>
		val_key = keys[1][2];
 800092c:	2236      	movs	r2, #54	; 0x36
 800092e:	4b63      	ldr	r3, [pc, #396]	; (8000abc <Keypad_Get_Char+0x35c>)
 8000930:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000932:	2120      	movs	r1, #32
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f001 f836 	bl	80019a8 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d111      	bne.n	8000966 <Keypad_Get_Char+0x206>
		HAL_Delay(4);
 8000942:	2004      	movs	r0, #4
 8000944:	f000 fd7c 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000948:	bf00      	nop
 800094a:	2120      	movs	r1, #32
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 f82a 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f7      	beq.n	800094a <Keypad_Get_Char+0x1ea>
		HAL_Delay(4);
 800095a:	2004      	movs	r0, #4
 800095c:	f000 fd70 	bl	8001440 <HAL_Delay>
		val_key = keys[1][3];
 8000960:	2242      	movs	r2, #66	; 0x42
 8000962:	4b56      	ldr	r3, [pc, #344]	; (8000abc <Keypad_Get_Char+0x35c>)
 8000964:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096c:	4854      	ldr	r0, [pc, #336]	; (8000ac0 <Keypad_Get_Char+0x360>)
 800096e:	f001 f833 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f001 f82c 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f001 f825 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	484c      	ldr	r0, [pc, #304]	; (8000ac4 <Keypad_Get_Char+0x364>)
 8000994:	f001 f820 	bl	80019d8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	4849      	ldr	r0, [pc, #292]	; (8000ac0 <Keypad_Get_Char+0x360>)
 800099c:	f001 f804 	bl	80019a8 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d110      	bne.n	80009c8 <Keypad_Get_Char+0x268>
		HAL_Delay(4);
 80009a6:	2004      	movs	r0, #4
 80009a8:	f000 fd4a 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80009ac:	bf00      	nop
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	4843      	ldr	r0, [pc, #268]	; (8000ac0 <Keypad_Get_Char+0x360>)
 80009b2:	f000 fff9 	bl	80019a8 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f8      	beq.n	80009ae <Keypad_Get_Char+0x24e>
		HAL_Delay(4);
 80009bc:	2004      	movs	r0, #4
 80009be:	f000 fd3f 	bl	8001440 <HAL_Delay>
		val_key = keys[2][0];
 80009c2:	2237      	movs	r2, #55	; 0x37
 80009c4:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <Keypad_Get_Char+0x35c>)
 80009c6:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f000 ffeb 	bl	80019a8 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d111      	bne.n	80009fc <Keypad_Get_Char+0x29c>
		HAL_Delay(4);
 80009d8:	2004      	movs	r0, #4
 80009da:	f000 fd31 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80009de:	bf00      	nop
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 ffdf 	bl	80019a8 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0f7      	beq.n	80009e0 <Keypad_Get_Char+0x280>
		HAL_Delay(4);
 80009f0:	2004      	movs	r0, #4
 80009f2:	f000 fd25 	bl	8001440 <HAL_Delay>
		val_key = keys[2][1];
 80009f6:	2238      	movs	r2, #56	; 0x38
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <Keypad_Get_Char+0x35c>)
 80009fa:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 ffd1 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d111      	bne.n	8000a30 <Keypad_Get_Char+0x2d0>
		HAL_Delay(4);
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f000 fd17 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000a12:	bf00      	nop
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f000 ffc5 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f7      	beq.n	8000a14 <Keypad_Get_Char+0x2b4>
		HAL_Delay(4);
 8000a24:	2004      	movs	r0, #4
 8000a26:	f000 fd0b 	bl	8001440 <HAL_Delay>
		val_key = keys[2][2];
 8000a2a:	2239      	movs	r2, #57	; 0x39
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <Keypad_Get_Char+0x35c>)
 8000a2e:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 8000a30:	2120      	movs	r1, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 ffb7 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d111      	bne.n	8000a64 <Keypad_Get_Char+0x304>
		HAL_Delay(4);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 fcfd 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000a46:	bf00      	nop
 8000a48:	2120      	movs	r1, #32
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 ffab 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f7      	beq.n	8000a48 <Keypad_Get_Char+0x2e8>
		HAL_Delay(4);
 8000a58:	2004      	movs	r0, #4
 8000a5a:	f000 fcf1 	bl	8001440 <HAL_Delay>
		val_key = keys[2][3];
 8000a5e:	2243      	movs	r2, #67	; 0x43
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <Keypad_Get_Char+0x35c>)
 8000a62:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <Keypad_Get_Char+0x360>)
 8000a6c:	f000 ffb4 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 ffad 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 ffa6 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <Keypad_Get_Char+0x364>)
 8000a92:	f000 ffa1 	bl	80019d8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <Keypad_Get_Char+0x360>)
 8000a9a:	f000 ff85 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d117      	bne.n	8000ad4 <Keypad_Get_Char+0x374>
		HAL_Delay(4);
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f000 fccb 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000aaa:	bf00      	nop
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <Keypad_Get_Char+0x360>)
 8000ab0:	f000 ff7a 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f8      	beq.n	8000aac <Keypad_Get_Char+0x34c>
 8000aba:	e005      	b.n	8000ac8 <Keypad_Get_Char+0x368>
 8000abc:	20000078 	.word	0x20000078
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	48000800 	.word	0x48000800
		HAL_Delay(4);
 8000ac8:	2004      	movs	r0, #4
 8000aca:	f000 fcb9 	bl	8001440 <HAL_Delay>
		val_key = keys[3][0];
 8000ace:	222a      	movs	r2, #42	; 0x2a
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <Keypad_Get_Char+0x418>)
 8000ad2:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f000 ff65 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d111      	bne.n	8000b08 <Keypad_Get_Char+0x3a8>
		HAL_Delay(4);
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f000 fcab 	bl	8001440 <HAL_Delay>
		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000aea:	bf00      	nop
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f000 ff59 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f7      	beq.n	8000aec <Keypad_Get_Char+0x38c>
		HAL_Delay(4);
 8000afc:	2004      	movs	r0, #4
 8000afe:	f000 fc9f 	bl	8001440 <HAL_Delay>
		val_key = keys[3][1];
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <Keypad_Get_Char+0x418>)
 8000b06:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f000 ff4b 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d111      	bne.n	8000b3c <Keypad_Get_Char+0x3dc>
		HAL_Delay(4);
 8000b18:	2004      	movs	r0, #4
 8000b1a:	f000 fc91 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000b1e:	bf00      	nop
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 ff3f 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d0f7      	beq.n	8000b20 <Keypad_Get_Char+0x3c0>
		HAL_Delay(4);
 8000b30:	2004      	movs	r0, #4
 8000b32:	f000 fc85 	bl	8001440 <HAL_Delay>
		val_key = keys[3][2];
 8000b36:	2223      	movs	r2, #35	; 0x23
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <Keypad_Get_Char+0x418>)
 8000b3a:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 ff31 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <Keypad_Get_Char+0x410>
		HAL_Delay(4);
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f000 fc77 	bl	8001440 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000b52:	bf00      	nop
 8000b54:	2120      	movs	r1, #32
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 ff25 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f7      	beq.n	8000b54 <Keypad_Get_Char+0x3f4>
		HAL_Delay(4);
 8000b64:	2004      	movs	r0, #4
 8000b66:	f000 fc6b 	bl	8001440 <HAL_Delay>
		val_key = keys[3][3];
 8000b6a:	2244      	movs	r2, #68	; 0x44
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <Keypad_Get_Char+0x418>)
 8000b6e:	701a      	strb	r2, [r3, #0]
	}
	return val_key;
 8000b70:	4b01      	ldr	r3, [pc, #4]	; (8000b78 <Keypad_Get_Char+0x418>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000078 	.word	0x20000078

08000b7c <main>:




int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fbe2 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f8f2 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 f9b2 	bl	8000ef0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b8c:	f000 f980 	bl	8000e90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b90:	f000 f93e 	bl	8000e10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    lcd_init();
 8000b94:	f7ff fd91 	bl	80006ba <lcd_init>
    lcd_enviar("key", 1, 3);
 8000b98:	2203      	movs	r2, #3
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4819      	ldr	r0, [pc, #100]	; (8000c04 <main+0x88>)
 8000b9e:	f7ff fd45 	bl	800062c <lcd_enviar>
    HAL_Delay(2000);
 8000ba2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ba6:	f000 fc4b 	bl	8001440 <HAL_Delay>
    lcd_clear();
 8000baa:	f7ff fd50 	bl	800064e <lcd_clear>

    inicializarLCD();
 8000bae:	f000 f82d 	bl	8000c0c <inicializarLCD>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Leer la entrada utilizando la función de la librería de keypad
	           key = Keypad_Get_Char();
 8000bb2:	f7ff fdd5 	bl	8000760 <Keypad_Get_Char>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <main+0x8c>)
 8000bbc:	701a      	strb	r2, [r3, #0]
	           if (key == '1' || key == '2' || key == '3') {
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <main+0x8c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b31      	cmp	r3, #49	; 0x31
 8000bc4:	d007      	beq.n	8000bd6 <main+0x5a>
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <main+0x8c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b32      	cmp	r3, #50	; 0x32
 8000bcc:	d003      	beq.n	8000bd6 <main+0x5a>
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <main+0x8c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b33      	cmp	r3, #51	; 0x33
 8000bd4:	d1ed      	bne.n	8000bb2 <main+0x36>
	          // Realizar acciones según el valor leído
	          switch (key) {
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <main+0x8c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b33      	cmp	r3, #51	; 0x33
 8000bdc:	d00c      	beq.n	8000bf8 <main+0x7c>
 8000bde:	2b33      	cmp	r3, #51	; 0x33
 8000be0:	dc0d      	bgt.n	8000bfe <main+0x82>
 8000be2:	2b31      	cmp	r3, #49	; 0x31
 8000be4:	d002      	beq.n	8000bec <main+0x70>
 8000be6:	2b32      	cmp	r3, #50	; 0x32
 8000be8:	d003      	beq.n	8000bf2 <main+0x76>
	                  caso3();
	                  break;

	              default:
	                  // Puedes manejar otras teclas o casos según sea necesario
	                  break;
 8000bea:	e008      	b.n	8000bfe <main+0x82>
	                  caso1();
 8000bec:	f000 f834 	bl	8000c58 <caso1>
	                  break;
 8000bf0:	e006      	b.n	8000c00 <main+0x84>
	                  caso2();
 8000bf2:	f000 f85f 	bl	8000cb4 <caso2>
	                  break;
 8000bf6:	e003      	b.n	8000c00 <main+0x84>
	                  caso3();
 8000bf8:	f000 f88a 	bl	8000d10 <caso3>
	                  break;
 8000bfc:	e000      	b.n	8000c00 <main+0x84>
	                  break;
 8000bfe:	bf00      	nop
	           key = Keypad_Get_Char();
 8000c00:	e7d7      	b.n	8000bb2 <main+0x36>
 8000c02:	bf00      	nop
 8000c04:	08004c98 	.word	0x08004c98
 8000c08:	20000158 	.word	0x20000158

08000c0c <inicializarLCD>:
  /* USER CODE END 3 */
}


// Función para inicializar la pantalla LCD con el mensaje inicial
void inicializarLCD(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    mostrarMensaje("Dryer Automatica", "Ciclos de Secado");
 8000c10:	4902      	ldr	r1, [pc, #8]	; (8000c1c <inicializarLCD+0x10>)
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <inicializarLCD+0x14>)
 8000c14:	f000 f806 	bl	8000c24 <mostrarMensaje>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08004c9c 	.word	0x08004c9c
 8000c20:	08004cb0 	.word	0x08004cb0

08000c24 <mostrarMensaje>:

// Función para mostrar mensajes específicos en la LCD
void mostrarMensaje(const char *linea1, const char *linea2) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
    // Asegúrate de tener una función en tu librería de LCD que permita mostrar texto
    lcd_clear();  // Limpia la pantalla antes de mostrar un nuevo mensaje
 8000c2e:	f7ff fd0e 	bl	800064e <lcd_clear>
    lcd_put_cur(0, 0);  // Coloca el cursor en la primera línea
 8000c32:	2100      	movs	r1, #0
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fd21 	bl	800067c <lcd_put_cur>
    lcd_send_string(linea1);  // Muestra el mensaje en la primera línea
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fd7a 	bl	8000734 <lcd_send_string>
    lcd_put_cur(1, 0);  // Coloca el cursor en la segunda línea
 8000c40:	2100      	movs	r1, #0
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff fd1a 	bl	800067c <lcd_put_cur>
    lcd_send_string(linea2);  // Muestra el mensaje en la segunda línea
 8000c48:	6838      	ldr	r0, [r7, #0]
 8000c4a:	f7ff fd73 	bl	8000734 <lcd_send_string>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <caso1>:

// Implementación de la función para el caso 1
void caso1(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
    // Muestra el mensaje específico en la LCD
    mostrarMensaje("High", "");
 8000c5e:	4912      	ldr	r1, [pc, #72]	; (8000ca8 <caso1+0x50>)
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <caso1+0x54>)
 8000c62:	f7ff ffdf 	bl	8000c24 <mostrarMensaje>

    // Inicializa el contador de segundos
    int contador = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]

    // Mientras el contador sea menor o igual a 60
    while (contador <= 10) {
 8000c6a:	e014      	b.n	8000c96 <caso1+0x3e>
        // Actualiza la segunda línea de la LCD con el valor del contador
        char mensaje[16];
        sprintf(mensaje, "Segundos: %02d", contador);
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	490f      	ldr	r1, [pc, #60]	; (8000cb0 <caso1+0x58>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 fb60 	bl	8004338 <siprintf>
        lcd_put_cur(1, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fcfe 	bl	800067c <lcd_put_cur>
        lcd_send_string(mensaje);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd56 	bl	8000734 <lcd_send_string>

        // Espera un segundo (ajusta según la unidad de tiempo que estés utilizando)
        HAL_Delay(1000);
 8000c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8c:	f000 fbd8 	bl	8001440 <HAL_Delay>

        // Incrementa el contador
        contador++;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
    while (contador <= 10) {
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b0a      	cmp	r3, #10
 8000c9a:	dde7      	ble.n	8000c6c <caso1+0x14>
    }

    // Vuelve a la pantalla inicial después de contar hasta 60 segundos
    inicializarLCD();
 8000c9c:	f7ff ffb6 	bl	8000c0c <inicializarLCD>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08004cc4 	.word	0x08004cc4
 8000cac:	08004cc8 	.word	0x08004cc8
 8000cb0:	08004cd0 	.word	0x08004cd0

08000cb4 <caso2>:

// Implementación de la función para el caso 2
void caso2(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
    // Muestra el mensaje específico en la LCD
    mostrarMensaje("Medium", "");
 8000cba:	4912      	ldr	r1, [pc, #72]	; (8000d04 <caso2+0x50>)
 8000cbc:	4812      	ldr	r0, [pc, #72]	; (8000d08 <caso2+0x54>)
 8000cbe:	f7ff ffb1 	bl	8000c24 <mostrarMensaje>


    // Inicializa el contador de segundos
       int contador = 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]

       // Mientras el contador sea menor o igual a 60
       while (contador <= 15) {
 8000cc6:	e014      	b.n	8000cf2 <caso2+0x3e>
           // Actualiza la segunda línea de la LCD con el valor del contador
           char mensaje[16];
           sprintf(mensaje, "Segundos: %02d", contador);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	490f      	ldr	r1, [pc, #60]	; (8000d0c <caso2+0x58>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fb32 	bl	8004338 <siprintf>
           lcd_put_cur(1, 0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff fcd0 	bl	800067c <lcd_put_cur>
           lcd_send_string(mensaje);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd28 	bl	8000734 <lcd_send_string>

           // Espera un segundo (ajusta según la unidad de tiempo que estés utilizando)
           HAL_Delay(1000);
 8000ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce8:	f000 fbaa 	bl	8001440 <HAL_Delay>

           // Incrementa el contador
           contador++;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
       while (contador <= 15) {
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	dde7      	ble.n	8000cc8 <caso2+0x14>

    // Espera durante un minuto (ajusta según la unidad de tiempo que estés utilizando)
   // HAL_Delay(60000);

    // Vuelve a la pantalla inicial después de un minuto
    inicializarLCD();
 8000cf8:	f7ff ff88 	bl	8000c0c <inicializarLCD>
}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	08004cc4 	.word	0x08004cc4
 8000d08:	08004ce0 	.word	0x08004ce0
 8000d0c:	08004cd0 	.word	0x08004cd0

08000d10 <caso3>:

// Implementación de la función para el caso 3
void caso3(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
    // Muestra el mensaje específico en la LCD
    mostrarMensaje("Low", "");
 8000d16:	4912      	ldr	r1, [pc, #72]	; (8000d60 <caso3+0x50>)
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <caso3+0x54>)
 8000d1a:	f7ff ff83 	bl	8000c24 <mostrarMensaje>


    // Inicializa el contador de segundos
       int contador = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]

       // Mientras el contador sea menor o igual a 60
       while (contador <= 20) {
 8000d22:	e014      	b.n	8000d4e <caso3+0x3e>
           // Actualiza la segunda línea de la LCD con el valor del contador
           char mensaje[16];
           sprintf(mensaje, "Segundos: %02d", contador);
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	490f      	ldr	r1, [pc, #60]	; (8000d68 <caso3+0x58>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fb04 	bl	8004338 <siprintf>
           lcd_put_cur(1, 0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fca2 	bl	800067c <lcd_put_cur>
           lcd_send_string(mensaje);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcfa 	bl	8000734 <lcd_send_string>

           // Espera un segundo (ajusta según la unidad de tiempo que estés utilizando)
           HAL_Delay(1000);
 8000d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d44:	f000 fb7c 	bl	8001440 <HAL_Delay>

           // Incrementa el contador
           contador++;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
       while (contador <= 20) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b14      	cmp	r3, #20
 8000d52:	dde7      	ble.n	8000d24 <caso3+0x14>

    // Espera durante un minuto (ajusta según la unidad de tiempo que estés utilizando)
   // HAL_Delay(60000);

    // Vuelve a la pantalla inicial después de un minuto
    inicializarLCD();
 8000d54:	f7ff ff5a 	bl	8000c0c <inicializarLCD>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08004cc4 	.word	0x08004cc4
 8000d64:	08004ce8 	.word	0x08004ce8
 8000d68:	08004cd0 	.word	0x08004cd0

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b096      	sub	sp, #88	; 0x58
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	2244      	movs	r2, #68	; 0x44
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fafc 	bl	8004378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d92:	f001 faa3 	bl	80022dc <HAL_PWREx_ControlVoltageScaling>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d9c:	f000 f954 	bl	8001048 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2310      	movs	r3, #16
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db2:	2302      	movs	r3, #2
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fada 	bl	8002388 <HAL_RCC_OscConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dda:	f000 f935 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	230f      	movs	r3, #15
 8000de0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	2303      	movs	r3, #3
 8000de4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2104      	movs	r1, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fea2 	bl	8002b40 <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e02:	f000 f921 	bl	8001048 <Error_Handler>
  }
}
 8000e06:	bf00      	nop
 8000e08:	3758      	adds	r7, #88	; 0x58
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_I2C1_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <MX_I2C1_Init+0x7c>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e4c:	f000 fddc 	bl	8001a08 <HAL_I2C_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e56:	f000 f8f7 	bl	8001048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e5e:	f001 f997 	bl	8002190 <HAL_I2CEx_ConfigAnalogFilter>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e68:	f000 f8ee 	bl	8001048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e70:	f001 f9d9 	bl	8002226 <HAL_I2CEx_ConfigDigitalFilter>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 f8e5 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000007c 	.word	0x2000007c
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	10909cec 	.word	0x10909cec

08000e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <MX_USART2_UART_Init+0x5c>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ed4:	f002 fd14 	bl	8003900 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 f8b3 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000d0 	.word	0x200000d0
 8000eec:	40004400 	.word	0x40004400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b4d      	ldr	r3, [pc, #308]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a4c      	ldr	r2, [pc, #304]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b4a      	ldr	r3, [pc, #296]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a46      	ldr	r2, [pc, #280]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b44      	ldr	r3, [pc, #272]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a40      	ldr	r2, [pc, #256]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a3a      	ldr	r2, [pc, #232]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4834      	ldr	r0, [pc, #208]	; (8001040 <MX_GPIO_Init+0x150>)
 8000f6e:	f000 fd33 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	4833      	ldr	r0, [pc, #204]	; (8001044 <MX_GPIO_Init+0x154>)
 8000f78:	f000 fd2e 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R2_Pin|R3_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 fd27 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4828      	ldr	r0, [pc, #160]	; (8001044 <MX_GPIO_Init+0x154>)
 8000fa2:	f000 fb57 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin;
 8000fa6:	23e0      	movs	r3, #224	; 0xe0
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f000 fb4a 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 8000fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4819      	ldr	r0, [pc, #100]	; (8001040 <MX_GPIO_Init+0x150>)
 8000fda:	f000 fb3b 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_Pin */
  GPIO_InitStruct.Pin = R4_Pin;
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R4_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_GPIO_Init+0x154>)
 8000ff6:	f000 fb2d 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R3_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R3_Pin;
 8000ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 fb1d 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_Pin */
  GPIO_InitStruct.Pin = C1_Pin;
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_GPIO_Init+0x150>)
 800102e:	f000 fb11 	bl	8001654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400
 8001044:	48000800 	.word	0x48000800

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	; 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ac      	sub	sp, #176	; 0xb0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2288      	movs	r2, #136	; 0x88
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 f95b 	bl	8004378 <memset>
  if(hi2c->Instance==I2C1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a21      	ldr	r2, [pc, #132]	; (800114c <HAL_I2C_MspInit+0xb0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d13b      	bne.n	8001144 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 ff55 	bl	8002f88 <HAL_RCCEx_PeriphCLKConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010e4:	f7ff ffb0 	bl	8001048 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_I2C_MspInit+0xb4>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <HAL_I2C_MspInit+0xb4>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_I2C_MspInit+0xb4>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001100:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111a:	2304      	movs	r3, #4
 800111c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001124:	4619      	mov	r1, r3
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <HAL_I2C_MspInit+0xb8>)
 8001128:	f000 fa94 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_I2C_MspInit+0xb4>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_I2C_MspInit+0xb4>)
 8001132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001136:	6593      	str	r3, [r2, #88]	; 0x58
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_I2C_MspInit+0xb4>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	37b0      	adds	r7, #176	; 0xb0
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40005400 	.word	0x40005400
 8001150:	40021000 	.word	0x40021000
 8001154:	48000400 	.word	0x48000400

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ac      	sub	sp, #176	; 0xb0
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2288      	movs	r2, #136	; 0x88
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f8fd 	bl	8004378 <memset>
  if(huart->Instance==USART2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_UART_MspInit+0xb0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13b      	bne.n	8001200 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001188:	2302      	movs	r3, #2
 800118a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fef7 	bl	8002f88 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a0:	f7ff ff52 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_UART_MspInit+0xb4>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_UART_MspInit+0xb4>)
 80011aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ae:	6593      	str	r3, [r2, #88]	; 0x58
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_UART_MspInit+0xb4>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_UART_MspInit+0xb4>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_UART_MspInit+0xb4>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_UART_MspInit+0xb4>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011d4:	230c      	movs	r3, #12
 80011d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ec:	2307      	movs	r3, #7
 80011ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f000 fa2a 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	37b0      	adds	r7, #176	; 0xb0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40004400 	.word	0x40004400
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8d0 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f003 f878 	bl	8004388 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20018000 	.word	0x20018000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	2000015c 	.word	0x2000015c
 80012cc:	200002b0 	.word	0x200002b0

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001322:	f003 f837 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff fc29 	bl	8000b7c <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800132c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001338:	08004d78 	.word	0x08004d78
  ldr r2, =_sbss
 800133c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001340:	200002ac 	.word	0x200002ac

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_Init+0x3c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_Init+0x3c>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135e:	2003      	movs	r0, #3
 8001360:	f000 f944 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f80f 	bl	8001388 <HAL_InitTick>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	e001      	b.n	800137a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001376:	f7ff fe6d 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800137a:	79fb      	ldrb	r3, [r7, #7]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_InitTick+0x6c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d023      	beq.n	80013e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_InitTick+0x70>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_InitTick+0x6c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f941 	bl	800163a <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d809      	bhi.n	80013d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f919 	bl	8001602 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_InitTick+0x74>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e007      	b.n	80013e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e004      	b.n	80013e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e001      	b.n	80013e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	20000160 	.word	0x20000160

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000160 	.word	0x20000160

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff47 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff5c 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffb0 	bl	80015a8 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e17f      	b.n	8001964 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8171 	beq.w	800195e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d005      	beq.n	8001694 <HAL_GPIO_Init+0x40>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d130      	bne.n	80016f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ca:	2201      	movs	r2, #1
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f003 0201 	and.w	r2, r3, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d118      	bne.n	8001734 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001708:	2201      	movs	r2, #1
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	08db      	lsrs	r3, r3, #3
 800171e:	f003 0201 	and.w	r2, r3, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b03      	cmp	r3, #3
 800173e:	d017      	beq.n	8001770 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	6939      	ldr	r1, [r7, #16]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80ac 	beq.w	800195e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <HAL_GPIO_Init+0x330>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6613      	str	r3, [r2, #96]	; 0x60
 8001812:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800181e:	4a5a      	ldr	r2, [pc, #360]	; (8001988 <HAL_GPIO_Init+0x334>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001848:	d025      	beq.n	8001896 <HAL_GPIO_Init+0x242>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <HAL_GPIO_Init+0x338>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01f      	beq.n	8001892 <HAL_GPIO_Init+0x23e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <HAL_GPIO_Init+0x33c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x23a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_GPIO_Init+0x340>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x236>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x344>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x232>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4b      	ldr	r2, [pc, #300]	; (800199c <HAL_GPIO_Init+0x348>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x22e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x22a>
 800187a:	2306      	movs	r3, #6
 800187c:	e00c      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800187e:	2307      	movs	r3, #7
 8001880:	e00a      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001882:	2305      	movs	r3, #5
 8001884:	e008      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001886:	2304      	movs	r3, #4
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800188a:	2303      	movs	r3, #3
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001896:	2300      	movs	r3, #0
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	f002 0203 	and.w	r2, r2, #3
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	4093      	lsls	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_GPIO_Init+0x350>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_GPIO_Init+0x350>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_GPIO_Init+0x350>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_GPIO_Init+0x350>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_GPIO_Init+0x350>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae78 	bne.w	8001664 <HAL_GPIO_Init+0x10>
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	48000400 	.word	0x48000400
 8001990:	48000800 	.word	0x48000800
 8001994:	48000c00 	.word	0x48000c00
 8001998:	48001000 	.word	0x48001000
 800199c:	48001400 	.word	0x48001400
 80019a0:	48001800 	.word	0x48001800
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e8:	787b      	ldrb	r3, [r7, #1]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f4:	e002      	b.n	80019fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e08d      	b.n	8001b36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fb34 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2224      	movs	r2, #36	; 0x24
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	e006      	b.n	8001a90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d108      	bne.n	8001aaa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	e007      	b.n	8001aba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69d9      	ldr	r1, [r3, #28]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	817b      	strh	r3, [r7, #10]
 8001b50:	4613      	mov	r3, r2
 8001b52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	f040 80fd 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_I2C_Master_Transmit+0x30>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e0f6      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x21e>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b78:	f7ff fc56 	bl	8001428 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2319      	movs	r3, #25
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f914 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0e1      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2221      	movs	r2, #33	; 0x21
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	893a      	ldrh	r2, [r7, #8]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2bff      	cmp	r3, #255	; 0xff
 8001bca:	d906      	bls.n	8001bda <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	22ff      	movs	r2, #255	; 0xff
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e007      	b.n	8001bea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d024      	beq.n	8001c3c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_I2C_Master_Transmit+0x228>)
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fa79 	bl	800212c <I2C_TransferConfig>
 8001c3a:	e066      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_I2C_Master_Transmit+0x228>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa6e 	bl	800212c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c50:	e05b      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	6a39      	ldr	r1, [r7, #32]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f8fd 	bl	8001e56 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e07b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d034      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0x1ca>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d130      	bne.n	8001d0a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f880 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e04d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2bff      	cmp	r3, #255	; 0xff
 8001cca:	d90e      	bls.n	8001cea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	8979      	ldrh	r1, [r7, #10]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fa22 	bl	800212c <I2C_TransferConfig>
 8001ce8:	e00f      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	8979      	ldrh	r1, [r7, #10]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fa11 	bl	800212c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d19e      	bne.n	8001c52 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	6a39      	ldr	r1, [r7, #32]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f8e3 	bl	8001ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_I2C_Master_Transmit+0x22c>)
 8001d3c:	400b      	ands	r3, r1
 8001d3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	80002000 	.word	0x80002000
 8001d6c:	fe00e800 	.word	0xfe00e800

08001d70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d103      	bne.n	8001d8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d007      	beq.n	8001dac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	619a      	str	r2, [r3, #24]
  }
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc8:	e031      	b.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d02d      	beq.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd2:	f7ff fb29 	bl	8001428 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d302      	bcc.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d122      	bne.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4013      	ands	r3, r2
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d113      	bne.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f043 0220 	orr.w	r2, r3, #32
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4013      	ands	r3, r2
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d0be      	beq.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e62:	e033      	b.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f87f 	bl	8001f6c <I2C_IsErrorOccurred>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e031      	b.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d025      	beq.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e80:	f7ff fad2 	bl	8001428 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d302      	bcc.n	8001e96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11a      	bne.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d013      	beq.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e007      	b.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d1c4      	bne.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef0:	e02f      	b.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f838 	bl	8001f6c <I2C_IsErrorOccurred>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02d      	b.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7ff fa8f 	bl	8001428 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11a      	bne.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d013      	beq.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f043 0220 	orr.w	r2, r3, #32
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e007      	b.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d1c8      	bne.n	8001ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d068      	beq.n	800206a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fa0:	e049      	b.n	8002036 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d045      	beq.n	8002036 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff fa3d 	bl	8001428 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_IsErrorOccurred+0x54>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d13a      	bne.n	8002036 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe2:	d121      	bne.n	8002028 <I2C_IsErrorOccurred+0xbc>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fea:	d01d      	beq.n	8002028 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d01a      	beq.n	8002028 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002000:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002002:	f7ff fa11 	bl	8001428 <HAL_GetTick>
 8002006:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002008:	e00e      	b.n	8002028 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800200a:	f7ff fa0d 	bl	8001428 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b19      	cmp	r3, #25
 8002016:	d907      	bls.n	8002028 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f043 0320 	orr.w	r3, r3, #32
 800201e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002026:	e006      	b.n	8002036 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b20      	cmp	r3, #32
 8002034:	d1e9      	bne.n	800200a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d003      	beq.n	800204c <I2C_IsErrorOccurred+0xe0>
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0aa      	beq.n	8001fa2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800204c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2220      	movs	r2, #32
 800205a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80020d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01c      	beq.n	800211a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff fe45 	bl	8001d70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <I2C_IsErrorOccurred+0x1bc>)
 80020f2:	400b      	ands	r3, r1
 80020f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800211a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800211e:	4618      	mov	r0, r3
 8002120:	3728      	adds	r7, #40	; 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	fe00e800 	.word	0xfe00e800

0800212c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	817b      	strh	r3, [r7, #10]
 800213a:	4613      	mov	r3, r2
 800213c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800213e:	897b      	ldrh	r3, [r7, #10]
 8002140:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002144:	7a7b      	ldrb	r3, [r7, #9]
 8002146:	041b      	lsls	r3, r3, #16
 8002148:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800214c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	4313      	orrs	r3, r2
 8002156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800215a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	0d5b      	lsrs	r3, r3, #21
 8002166:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <I2C_TransferConfig+0x60>)
 800216c:	430b      	orrs	r3, r1
 800216e:	43db      	mvns	r3, r3
 8002170:	ea02 0103 	and.w	r1, r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	03ff63ff 	.word	0x03ff63ff

08002190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d138      	bne.n	8002218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e032      	b.n	800221a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b20      	cmp	r3, #32
 800223a:	d139      	bne.n	80022b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002246:	2302      	movs	r3, #2
 8002248:	e033      	b.n	80022b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2224      	movs	r2, #36	; 0x24
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40007000 	.word	0x40007000

080022dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ea:	d130      	bne.n	800234e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f8:	d038      	beq.n	800236c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002302:	4a1e      	ldr	r2, [pc, #120]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2232      	movs	r2, #50	; 0x32
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0c9b      	lsrs	r3, r3, #18
 800231c:	3301      	adds	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002320:	e002      	b.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3b01      	subs	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002334:	d102      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f2      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002348:	d110      	bne.n	800236c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e00f      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d007      	beq.n	800236c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002364:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000
 8002380:	20000000 	.word	0x20000000
 8002384:	431bde83 	.word	0x431bde83

08002388 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e3ca      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	4b97      	ldr	r3, [pc, #604]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a4:	4b94      	ldr	r3, [pc, #592]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80e4 	beq.w	8002584 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4a>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	f040 808b 	bne.w	80024e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 8087 	bne.w	80024e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e3a2      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <HAL_RCC_OscConfig+0x7c>
 80023fa:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002402:	e005      	b.n	8002410 <HAL_RCC_OscConfig+0x88>
 8002404:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002410:	4293      	cmp	r3, r2
 8002412:	d223      	bcs.n	800245c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fd55 	bl	8002ec8 <RCC_SetFlashLatencyFromMSIRange>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e383      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002428:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a72      	ldr	r2, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b70      	ldr	r3, [pc, #448]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	496d      	ldr	r1, [pc, #436]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002446:	4b6c      	ldr	r3, [pc, #432]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	4968      	ldr	r1, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
 800245a:	e025      	b.n	80024a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002462:	f043 0308 	orr.w	r3, r3, #8
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4960      	ldr	r1, [pc, #384]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	495b      	ldr	r1, [pc, #364]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fd15 	bl	8002ec8 <RCC_SetFlashLatencyFromMSIRange>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e343      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a8:	f000 fc4a 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	4950      	ldr	r1, [pc, #320]	; (80025fc <HAL_RCC_OscConfig+0x274>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	4a4e      	ldr	r2, [pc, #312]	; (8002600 <HAL_RCC_OscConfig+0x278>)
 80024c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <HAL_RCC_OscConfig+0x27c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe ff5b 	bl	8001388 <HAL_InitTick>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d052      	beq.n	8002582 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	e327      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d032      	beq.n	800254e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a42      	ldr	r2, [pc, #264]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f4:	f7fe ff98 	bl	8001428 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024fc:	f7fe ff94 	bl	8001428 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e310      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a36      	ldr	r2, [pc, #216]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4931      	ldr	r1, [pc, #196]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	492c      	ldr	r1, [pc, #176]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
 800254c:	e01a      	b.n	8002584 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800255a:	f7fe ff65 	bl	8001428 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002562:	f7fe ff61 	bl	8001428 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e2dd      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002574:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x1da>
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002582:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d074      	beq.n	800267a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x21a>
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d10e      	bne.n	80025ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d10b      	bne.n	80025ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d064      	beq.n	8002678 <HAL_RCC_OscConfig+0x2f0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d160      	bne.n	8002678 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e2ba      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x24a>
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e026      	b.n	8002620 <HAL_RCC_OscConfig+0x298>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025da:	d115      	bne.n	8002608 <HAL_RCC_OscConfig+0x280>
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a02      	ldr	r2, [pc, #8]	; (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e014      	b.n	8002620 <HAL_RCC_OscConfig+0x298>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08004cec 	.word	0x08004cec
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004
 8002608:	4ba0      	ldr	r3, [pc, #640]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a9f      	ldr	r2, [pc, #636]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b9d      	ldr	r3, [pc, #628]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a9c      	ldr	r2, [pc, #624]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fefe 	bl	8001428 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fefa 	bl	8001428 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e276      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002642:	4b92      	ldr	r3, [pc, #584]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x2a8>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe feea 	bl	8001428 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fee6 	bl	8001428 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e262      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266a:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x2d0>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d060      	beq.n	8002748 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d005      	beq.n	8002698 <HAL_RCC_OscConfig+0x310>
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002698:	4b7c      	ldr	r3, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x328>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e23f      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b76      	ldr	r3, [pc, #472]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4973      	ldr	r1, [pc, #460]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c4:	e040      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d023      	beq.n	8002716 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ce:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6e      	ldr	r2, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fea5 	bl	8001428 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fea1 	bl	8001428 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e21d      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f4:	4b65      	ldr	r3, [pc, #404]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b62      	ldr	r3, [pc, #392]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	495f      	ldr	r1, [pc, #380]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	e018      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b5d      	ldr	r3, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5c      	ldr	r2, [pc, #368]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fe81 	bl	8001428 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272a:	f7fe fe7d 	bl	8001428 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1f9      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03c      	beq.n	80027ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002762:	4a4a      	ldr	r2, [pc, #296]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fe5c 	bl	8001428 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7fe fe58 	bl	8001428 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1d4      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCC_OscConfig+0x3ec>
 8002794:	e01b      	b.n	80027ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279c:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fe3f 	bl	8001428 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fe fe3b 	bl	8001428 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1b7      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a6 	beq.w	8002928 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	4a26      	ldr	r2, [pc, #152]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6593      	str	r3, [r2, #88]	; 0x58
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002804:	2301      	movs	r3, #1
 8002806:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_OscConfig+0x508>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d118      	bne.n	8002846 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCC_OscConfig+0x508>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x508>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002820:	f7fe fe02 	bl	8001428 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe fdfe 	bl	8001428 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e17a      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x508>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x4d8>
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800285e:	e029      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d115      	bne.n	8002894 <HAL_RCC_OscConfig+0x50c>
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <HAL_RCC_OscConfig+0x504>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a03      	ldr	r2, [pc, #12]	; (800288c <HAL_RCC_OscConfig+0x504>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	4b9c      	ldr	r3, [pc, #624]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	4a9b      	ldr	r2, [pc, #620]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a4:	4b98      	ldr	r3, [pc, #608]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a97      	ldr	r2, [pc, #604]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d016      	beq.n	80028ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fdb4 	bl	8001428 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fdb0 	bl	8001428 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e12a      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	4b8b      	ldr	r3, [pc, #556]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ed      	beq.n	80028c4 <HAL_RCC_OscConfig+0x53c>
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fd9d 	bl	8001428 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe fd99 	bl	8001428 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e113      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	4b7f      	ldr	r3, [pc, #508]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ed      	bne.n	80028f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291c:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	4a79      	ldr	r2, [pc, #484]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80fe 	beq.w	8002b2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 80d0 	bne.w	8002adc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800293c:	4b72      	ldr	r3, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	429a      	cmp	r2, r3
 800294e:	d130      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	3b01      	subs	r3, #1
 800295c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d127      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d11f      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800297c:	2a07      	cmp	r2, #7
 800297e:	bf14      	ite	ne
 8002980:	2201      	movne	r2, #1
 8002982:	2200      	moveq	r2, #0
 8002984:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	4293      	cmp	r3, r2
 8002988:	d113      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	3b01      	subs	r3, #1
 80029ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d06e      	beq.n	8002a90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d069      	beq.n	8002a8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029b8:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0ad      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80029da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e0:	f7fe fd22 	bl	8001428 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fd1e 	bl	8001428 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e09a      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fa:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a06:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a16:	3a01      	subs	r2, #1
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a20:	0212      	lsls	r2, r2, #8
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a28:	0852      	lsrs	r2, r2, #1
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	0552      	lsls	r2, r2, #21
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a34:	0852      	lsrs	r2, r2, #1
 8002a36:	3a01      	subs	r2, #1
 8002a38:	0652      	lsls	r2, r2, #25
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a40:	0912      	lsrs	r2, r2, #4
 8002a42:	0452      	lsls	r2, r2, #17
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4930      	ldr	r1, [pc, #192]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a64:	f7fe fce0 	bl	8001428 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fcdc 	bl	8001428 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e058      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8a:	e050      	b.n	8002b2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04f      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d148      	bne.n	8002b2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab4:	f7fe fcb8 	bl	8001428 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fcb4 	bl	8001428 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e030      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x734>
 8002ada:	e028      	b.n	8002b2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d023      	beq.n	8002b2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_RCC_OscConfig+0x780>)
 8002ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fc9b 	bl	8001428 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af4:	e00c      	b.n	8002b10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe fc97 	bl	8001428 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d905      	bls.n	8002b10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e013      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_OscConfig+0x7b0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ec      	bne.n	8002af6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x7b0>)
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4905      	ldr	r1, [pc, #20]	; (8002b38 <HAL_RCC_OscConfig+0x7b0>)
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x7b4>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
 8002b28:	e001      	b.n	8002b2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	feeefffc 	.word	0xfeeefffc

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0e7      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d910      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 0207 	bic.w	r2, r3, #7
 8002b6a:	4970      	ldr	r1, [pc, #448]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b6e      	ldr	r3, [pc, #440]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cf      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d908      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba0:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4960      	ldr	r1, [pc, #384]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04c      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d121      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0a6      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e09a      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf6:	4b4e      	ldr	r3, [pc, #312]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e08e      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c06:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e086      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4943      	ldr	r1, [pc, #268]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe fbfe 	bl	8001428 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe fbfa 	bl	8001428 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e06e      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d208      	bcs.n	8002c86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	492b      	ldr	r1, [pc, #172]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d210      	bcs.n	8002cb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 0207 	bic.w	r2, r3, #7
 8002c9c:	4923      	ldr	r1, [pc, #140]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e036      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4918      	ldr	r1, [pc, #96]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4910      	ldr	r1, [pc, #64]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cf4:	f000 f824 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	490b      	ldr	r1, [pc, #44]	; (8002d34 <HAL_RCC_ClockConfig+0x1f4>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002d12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1fc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fb35 	bl	8001388 <HAL_InitTick>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08004cec 	.word	0x08004cec
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000004 	.word	0x20000004

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x34>
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d121      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d11e      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e005      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d102      	bne.n	8002dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d134      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d003      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0xac>
 8002de4:	e005      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002de6:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002de8:	617b      	str	r3, [r7, #20]
      break;
 8002dea:	e005      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dee:	617b      	str	r3, [r7, #20]
      break;
 8002df0:	e002      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	617b      	str	r3, [r7, #20]
      break;
 8002df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	3301      	adds	r3, #1
 8002e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	fb03 f202 	mul.w	r2, r3, r2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0e5b      	lsrs	r3, r3, #25
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e38:	69bb      	ldr	r3, [r7, #24]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08004d04 	.word	0x08004d04
 8002e50:	00f42400 	.word	0x00f42400
 8002e54:	007a1200 	.word	0x007a1200

08002e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000000 	.word	0x20000000

08002e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e74:	f7ff fff0 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4904      	ldr	r1, [pc, #16]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08004cfc 	.word	0x08004cfc

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ea0:	f7ff ffda 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08004cfc 	.word	0x08004cfc

08002ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ee0:	f7ff f9ee 	bl	80022c0 <HAL_PWREx_GetVoltageRange>
 8002ee4:	6178      	str	r0, [r7, #20]
 8002ee6:	e014      	b.n	8002f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f00:	f7ff f9de 	bl	80022c0 <HAL_PWREx_GetVoltageRange>
 8002f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f18:	d10b      	bne.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	d919      	bls.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2ba0      	cmp	r3, #160	; 0xa0
 8002f24:	d902      	bls.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f26:	2302      	movs	r3, #2
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	e013      	b.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	e010      	b.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d902      	bls.n	8002f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f38:	2303      	movs	r3, #3
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	e00a      	b.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d102      	bne.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f44:	2302      	movs	r3, #2
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e004      	b.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b70      	cmp	r3, #112	; 0x70
 8002f4e:	d101      	bne.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f50:	2301      	movs	r3, #1
 8002f52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 0207 	bic.w	r2, r3, #7
 8002f5c:	4909      	ldr	r1, [pc, #36]	; (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40022000 	.word	0x40022000

08002f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f90:	2300      	movs	r3, #0
 8002f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f94:	2300      	movs	r3, #0
 8002f96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d041      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fac:	d02a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fb2:	d824      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb8:	d008      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fbe:	d81e      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc8:	d010      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fca:	e018      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fcc:	4b86      	ldr	r3, [pc, #536]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a85      	ldr	r2, [pc, #532]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fd8:	e015      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fabb 	bl	800355c <RCCEx_PLLSAI1_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fea:	e00c      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3320      	adds	r3, #32
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fba6 	bl	8003744 <RCCEx_PLLSAI2_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffc:	e003      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	74fb      	strb	r3, [r7, #19]
      break;
 8003002:	e000      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800300c:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301a:	4973      	ldr	r1, [pc, #460]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003022:	e001      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d041      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800303c:	d02a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800303e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003042:	d824      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003048:	d008      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800304a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800304e:	d81e      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d010      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800305a:	e018      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a61      	ldr	r2, [pc, #388]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003068:	e015      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fa73 	bl	800355c <RCCEx_PLLSAI1_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800307a:	e00c      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3320      	adds	r3, #32
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fb5e 	bl	8003744 <RCCEx_PLLSAI2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800308c:	e003      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	74fb      	strb	r3, [r7, #19]
      break;
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800309c:	4b52      	ldr	r3, [pc, #328]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030aa:	494f      	ldr	r1, [pc, #316]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030b2:	e001      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a0 	beq.w	8003206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
 80030ec:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fc:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003108:	f7fe f98e 	bl	8001428 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800310e:	e009      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fe f98a 	bl	8001428 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d902      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	74fb      	strb	r3, [r7, #19]
        break;
 8003122:	e005      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ef      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d15c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003140:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01f      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d019      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe f949 	bl	8001428 <HAL_GetTick>
 8003196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003198:	e00b      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fe f945 	bl	8001428 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d902      	bls.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	74fb      	strb	r3, [r7, #19]
            break;
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ec      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	4904      	ldr	r1, [pc, #16]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031de:	e009      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	74bb      	strb	r3, [r7, #18]
 80031e4:	e006      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f4:	7c7b      	ldrb	r3, [r7, #17]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b9e      	ldr	r3, [pc, #632]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	4a9d      	ldr	r2, [pc, #628]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003204:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003212:	4b98      	ldr	r3, [pc, #608]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f023 0203 	bic.w	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	4994      	ldr	r1, [pc, #592]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003234:	4b8f      	ldr	r3, [pc, #572]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 020c 	bic.w	r2, r3, #12
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	498c      	ldr	r1, [pc, #560]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003256:	4b87      	ldr	r3, [pc, #540]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4983      	ldr	r1, [pc, #524]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003278:	4b7e      	ldr	r3, [pc, #504]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	497b      	ldr	r1, [pc, #492]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a8:	4972      	ldr	r1, [pc, #456]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032bc:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ca:	496a      	ldr	r1, [pc, #424]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032de:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	4961      	ldr	r1, [pc, #388]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003300:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330e:	4959      	ldr	r1, [pc, #356]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003322:	4b54      	ldr	r3, [pc, #336]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	4950      	ldr	r1, [pc, #320]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003344:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	4948      	ldr	r1, [pc, #288]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003366:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	493f      	ldr	r1, [pc, #252]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d028      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003388:	4b3a      	ldr	r3, [pc, #232]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003396:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a6:	d106      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a8:	4b32      	ldr	r3, [pc, #200]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a31      	ldr	r2, [pc, #196]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b2:	60d3      	str	r3, [r2, #12]
 80033b4:	e011      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033be:	d10c      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f8c8 	bl	800355c <RCCEx_PLLSAI1_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d028      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033e6:	4b23      	ldr	r3, [pc, #140]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	491f      	ldr	r1, [pc, #124]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003404:	d106      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003410:	60d3      	str	r3, [r2, #12]
 8003412:	e011      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800341c:	d10c      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f899 	bl	800355c <RCCEx_PLLSAI1_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d02b      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003462:	d109      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a02      	ldr	r2, [pc, #8]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346e:	60d3      	str	r3, [r2, #12]
 8003470:	e014      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003480:	d10c      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f867 	bl	800355c <RCCEx_PLLSAI1_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02f      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b6:	4928      	ldr	r1, [pc, #160]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f844 	bl	800355c <RCCEx_PLLSAI1_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d014      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	74bb      	strb	r3, [r7, #18]
 80034e2:	e011      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3320      	adds	r3, #32
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f925 	bl	8003744 <RCCEx_PLLSAI2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003522:	490d      	ldr	r1, [pc, #52]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003546:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800354e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000

0800355c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356a:	4b75      	ldr	r3, [pc, #468]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003576:	4b72      	ldr	r3, [pc, #456]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0203 	and.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d10d      	bne.n	80035a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
       ||
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800358e:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
       ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d047      	beq.n	8003632 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e044      	b.n	8003632 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d018      	beq.n	80035e2 <RCCEx_PLLSAI1_Config+0x86>
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d825      	bhi.n	8003600 <RCCEx_PLLSAI1_Config+0xa4>
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d002      	beq.n	80035be <RCCEx_PLLSAI1_Config+0x62>
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d009      	beq.n	80035d0 <RCCEx_PLLSAI1_Config+0x74>
 80035bc:	e020      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035be:	4b60      	ldr	r3, [pc, #384]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11d      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ce:	e01a      	b.n	8003606 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d0:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d116      	bne.n	800360a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e0:	e013      	b.n	800360a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035e2:	4b57      	ldr	r3, [pc, #348]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ee:	4b54      	ldr	r3, [pc, #336]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035fe:	e006      	b.n	800360e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
      break;
 8003604:	e004      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003616:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	430b      	orrs	r3, r1
 800362c:	4944      	ldr	r1, [pc, #272]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d17d      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003638:	4b41      	ldr	r3, [pc, #260]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a40      	ldr	r2, [pc, #256]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fd fef0 	bl	8001428 <HAL_GetTick>
 8003648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800364a:	e009      	b.n	8003660 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800364c:	f7fd feec 	bl	8001428 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d902      	bls.n	8003660 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	73fb      	strb	r3, [r7, #15]
        break;
 800365e:	e005      	b.n	800366c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003660:	4b37      	ldr	r3, [pc, #220]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ef      	bne.n	800364c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d160      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003678:	4b31      	ldr	r3, [pc, #196]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	0211      	lsls	r1, r2, #8
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	0912      	lsrs	r2, r2, #4
 8003690:	0452      	lsls	r2, r2, #17
 8003692:	430a      	orrs	r2, r1
 8003694:	492a      	ldr	r1, [pc, #168]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	610b      	str	r3, [r1, #16]
 800369a:	e027      	b.n	80036ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d112      	bne.n	80036c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a2:	4b27      	ldr	r3, [pc, #156]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6892      	ldr	r2, [r2, #8]
 80036b2:	0211      	lsls	r1, r2, #8
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6912      	ldr	r2, [r2, #16]
 80036b8:	0852      	lsrs	r2, r2, #1
 80036ba:	3a01      	subs	r2, #1
 80036bc:	0552      	lsls	r2, r2, #21
 80036be:	430a      	orrs	r2, r1
 80036c0:	491f      	ldr	r1, [pc, #124]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	610b      	str	r3, [r1, #16]
 80036c6:	e011      	b.n	80036ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6952      	ldr	r2, [r2, #20]
 80036de:	0852      	lsrs	r2, r2, #1
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0652      	lsls	r2, r2, #25
 80036e4:	430a      	orrs	r2, r1
 80036e6:	4916      	ldr	r1, [pc, #88]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fd fe96 	bl	8001428 <HAL_GetTick>
 80036fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036fe:	e009      	b.n	8003714 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003700:	f7fd fe92 	bl	8001428 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d902      	bls.n	8003714 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	73fb      	strb	r3, [r7, #15]
          break;
 8003712:	e005      	b.n	8003720 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	4904      	ldr	r1, [pc, #16]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000

08003744 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003752:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d018      	beq.n	8003790 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800375e:	4b67      	ldr	r3, [pc, #412]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0203 	and.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d10d      	bne.n	800378a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
       ||
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003776:	4b61      	ldr	r3, [pc, #388]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
       ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d047      	beq.n	800381a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e044      	b.n	800381a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d018      	beq.n	80037ca <RCCEx_PLLSAI2_Config+0x86>
 8003798:	2b03      	cmp	r3, #3
 800379a:	d825      	bhi.n	80037e8 <RCCEx_PLLSAI2_Config+0xa4>
 800379c:	2b01      	cmp	r3, #1
 800379e:	d002      	beq.n	80037a6 <RCCEx_PLLSAI2_Config+0x62>
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d009      	beq.n	80037b8 <RCCEx_PLLSAI2_Config+0x74>
 80037a4:	e020      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037a6:	4b55      	ldr	r3, [pc, #340]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11d      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b6:	e01a      	b.n	80037ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d116      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e013      	b.n	80037f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ca:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037d6:	4b49      	ldr	r3, [pc, #292]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037e6:	e006      	b.n	80037f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	e004      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	430b      	orrs	r3, r1
 8003814:	4939      	ldr	r1, [pc, #228]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d167      	bne.n	80038f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a35      	ldr	r2, [pc, #212]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382c:	f7fd fdfc 	bl	8001428 <HAL_GetTick>
 8003830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003832:	e009      	b.n	8003848 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003834:	f7fd fdf8 	bl	8001428 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	73fb      	strb	r3, [r7, #15]
        break;
 8003846:	e005      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ef      	bne.n	8003834 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d14a      	bne.n	80038f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6892      	ldr	r2, [r2, #8]
 8003870:	0211      	lsls	r1, r2, #8
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68d2      	ldr	r2, [r2, #12]
 8003876:	0912      	lsrs	r2, r2, #4
 8003878:	0452      	lsls	r2, r2, #17
 800387a:	430a      	orrs	r2, r1
 800387c:	491f      	ldr	r1, [pc, #124]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	614b      	str	r3, [r1, #20]
 8003882:	e011      	b.n	80038a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800388c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6892      	ldr	r2, [r2, #8]
 8003894:	0211      	lsls	r1, r2, #8
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6912      	ldr	r2, [r2, #16]
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	3a01      	subs	r2, #1
 800389e:	0652      	lsls	r2, r2, #25
 80038a0:	430a      	orrs	r2, r1
 80038a2:	4916      	ldr	r1, [pc, #88]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038a8:	4b14      	ldr	r3, [pc, #80]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a13      	ldr	r2, [pc, #76]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fd fdb8 	bl	8001428 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ba:	e009      	b.n	80038d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038bc:	f7fd fdb4 	bl	8001428 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	73fb      	strb	r3, [r7, #15]
          break;
 80038ce:	e005      	b.n	80038dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ef      	beq.n	80038bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	4904      	ldr	r1, [pc, #16]	; (80038fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e040      	b.n	8003994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fc18 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fae0 	bl	8003f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f825 	bl	800399c <UART_SetConfig>
 8003952:	4603      	mov	r3, r0
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e01b      	b.n	8003994 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fb5f 	bl	8004050 <UART_CheckIdleState>
 8003992:	4603      	mov	r3, r0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800399c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a0:	b08a      	sub	sp, #40	; 0x28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4ba4      	ldr	r3, [pc, #656]	; (8003c5c <UART_SetConfig+0x2c0>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a99      	ldr	r2, [pc, #612]	; (8003c60 <UART_SetConfig+0x2c4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	4313      	orrs	r3, r2
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a90      	ldr	r2, [pc, #576]	; (8003c64 <UART_SetConfig+0x2c8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d126      	bne.n	8003a74 <UART_SetConfig+0xd8>
 8003a26:	4b90      	ldr	r3, [pc, #576]	; (8003c68 <UART_SetConfig+0x2cc>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d81b      	bhi.n	8003a6c <UART_SetConfig+0xd0>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <UART_SetConfig+0xa0>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a65 	.word	0x08003a65
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a52:	e116      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003a54:	2302      	movs	r3, #2
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5a:	e112      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e10e      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003a64:	2308      	movs	r3, #8
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e10a      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e106      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d138      	bne.n	8003af0 <UART_SetConfig+0x154>
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	; (8003c68 <UART_SetConfig+0x2cc>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d82d      	bhi.n	8003ae8 <UART_SetConfig+0x14c>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <UART_SetConfig+0xf8>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003ae9 	.word	0x08003ae9
 8003a9c:	08003ae9 	.word	0x08003ae9
 8003aa0:	08003ae9 	.word	0x08003ae9
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003ae9 	.word	0x08003ae9
 8003aac:	08003ae9 	.word	0x08003ae9
 8003ab0:	08003ae9 	.word	0x08003ae9
 8003ab4:	08003ad1 	.word	0x08003ad1
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003ae1 	.word	0x08003ae1
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ace:	e0d8      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad6:	e0d4      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ade:	e0d0      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae6:	e0cc      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e0c8      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5e      	ldr	r2, [pc, #376]	; (8003c70 <UART_SetConfig+0x2d4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d125      	bne.n	8003b46 <UART_SetConfig+0x1aa>
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <UART_SetConfig+0x2cc>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d016      	beq.n	8003b36 <UART_SetConfig+0x19a>
 8003b08:	2b30      	cmp	r3, #48	; 0x30
 8003b0a:	d818      	bhi.n	8003b3e <UART_SetConfig+0x1a2>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d00a      	beq.n	8003b26 <UART_SetConfig+0x18a>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d814      	bhi.n	8003b3e <UART_SetConfig+0x1a2>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <UART_SetConfig+0x182>
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d008      	beq.n	8003b2e <UART_SetConfig+0x192>
 8003b1c:	e00f      	b.n	8003b3e <UART_SetConfig+0x1a2>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b24:	e0ad      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b26:	2302      	movs	r3, #2
 8003b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2c:	e0a9      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b34:	e0a5      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b36:	2308      	movs	r3, #8
 8003b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3c:	e0a1      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b3e:	2310      	movs	r3, #16
 8003b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b44:	e09d      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4a      	ldr	r2, [pc, #296]	; (8003c74 <UART_SetConfig+0x2d8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d125      	bne.n	8003b9c <UART_SetConfig+0x200>
 8003b50:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b5c:	d016      	beq.n	8003b8c <UART_SetConfig+0x1f0>
 8003b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b60:	d818      	bhi.n	8003b94 <UART_SetConfig+0x1f8>
 8003b62:	2b80      	cmp	r3, #128	; 0x80
 8003b64:	d00a      	beq.n	8003b7c <UART_SetConfig+0x1e0>
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d814      	bhi.n	8003b94 <UART_SetConfig+0x1f8>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <UART_SetConfig+0x1d8>
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d008      	beq.n	8003b84 <UART_SetConfig+0x1e8>
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x1f8>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7a:	e082      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e07e      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b84:	2304      	movs	r3, #4
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e07a      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e076      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b94:	2310      	movs	r3, #16
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e072      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a35      	ldr	r2, [pc, #212]	; (8003c78 <UART_SetConfig+0x2dc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d12a      	bne.n	8003bfc <UART_SetConfig+0x260>
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <UART_SetConfig+0x2cc>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb4:	d01a      	beq.n	8003bec <UART_SetConfig+0x250>
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d81b      	bhi.n	8003bf4 <UART_SetConfig+0x258>
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc0:	d00c      	beq.n	8003bdc <UART_SetConfig+0x240>
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc6:	d815      	bhi.n	8003bf4 <UART_SetConfig+0x258>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <UART_SetConfig+0x238>
 8003bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd0:	d008      	beq.n	8003be4 <UART_SetConfig+0x248>
 8003bd2:	e00f      	b.n	8003bf4 <UART_SetConfig+0x258>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e052      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e04e      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e04a      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e046      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e042      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <UART_SetConfig+0x2c4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d13a      	bne.n	8003c7c <UART_SetConfig+0x2e0>
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <UART_SetConfig+0x2cc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c14:	d01a      	beq.n	8003c4c <UART_SetConfig+0x2b0>
 8003c16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c1a:	d81b      	bhi.n	8003c54 <UART_SetConfig+0x2b8>
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c20:	d00c      	beq.n	8003c3c <UART_SetConfig+0x2a0>
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c26:	d815      	bhi.n	8003c54 <UART_SetConfig+0x2b8>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <UART_SetConfig+0x298>
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c30:	d008      	beq.n	8003c44 <UART_SetConfig+0x2a8>
 8003c32:	e00f      	b.n	8003c54 <UART_SetConfig+0x2b8>
 8003c34:	2300      	movs	r3, #0
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e022      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e01e      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003c44:	2304      	movs	r3, #4
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e01a      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e016      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003c54:	2310      	movs	r3, #16
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e012      	b.n	8003c82 <UART_SetConfig+0x2e6>
 8003c5c:	efff69f3 	.word	0xefff69f3
 8003c60:	40008000 	.word	0x40008000
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40004400 	.word	0x40004400
 8003c70:	40004800 	.word	0x40004800
 8003c74:	40004c00 	.word	0x40004c00
 8003c78:	40005000 	.word	0x40005000
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a9f      	ldr	r2, [pc, #636]	; (8003f04 <UART_SetConfig+0x568>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d17a      	bne.n	8003d82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d824      	bhi.n	8003cde <UART_SetConfig+0x342>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0x300>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003ccf 	.word	0x08003ccf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cdf 	.word	0x08003cdf
 8003cb8:	08003cdf 	.word	0x08003cdf
 8003cbc:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f7ff f8d6 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	61f8      	str	r0, [r7, #28]
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b8f      	ldr	r3, [pc, #572]	; (8003f08 <UART_SetConfig+0x56c>)
 8003cca:	61fb      	str	r3, [r7, #28]
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7ff f837 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8003cd2:	61f8      	str	r0, [r7, #28]
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	61fb      	str	r3, [r7, #28]
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80fb 	beq.w	8003ee8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d305      	bcc.n	8003d0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d903      	bls.n	8003d16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d14:	e0e8      	b.n	8003ee8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	4615      	mov	r5, r2
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	022b      	lsls	r3, r5, #8
 8003d28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d2c:	0222      	lsls	r2, r4, #8
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	6849      	ldr	r1, [r1, #4]
 8003d32:	0849      	lsrs	r1, r1, #1
 8003d34:	2000      	movs	r0, #0
 8003d36:	4688      	mov	r8, r1
 8003d38:	4681      	mov	r9, r0
 8003d3a:	eb12 0a08 	adds.w	sl, r2, r8
 8003d3e:	eb43 0b09 	adc.w	fp, r3, r9
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d50:	4650      	mov	r0, sl
 8003d52:	4659      	mov	r1, fp
 8003d54:	f7fc fa8c 	bl	8000270 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d66:	d308      	bcc.n	8003d7a <UART_SetConfig+0x3de>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6e:	d204      	bcs.n	8003d7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	e0b6      	b.n	8003ee8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d80:	e0b2      	b.n	8003ee8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8a:	d15e      	bne.n	8003e4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d828      	bhi.n	8003de6 <UART_SetConfig+0x44a>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x400>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08003de7 	.word	0x08003de7
 8003dac:	08003dd7 	.word	0x08003dd7
 8003db0:	08003de7 	.word	0x08003de7
 8003db4:	08003de7 	.word	0x08003de7
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003ddf 	.word	0x08003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7ff f856 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	61f8      	str	r0, [r7, #28]
        break;
 8003dc6:	e014      	b.n	8003df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc8:	f7ff f868 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 8003dcc:	61f8      	str	r0, [r7, #28]
        break;
 8003dce:	e010      	b.n	8003df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	4b4d      	ldr	r3, [pc, #308]	; (8003f08 <UART_SetConfig+0x56c>)
 8003dd2:	61fb      	str	r3, [r7, #28]
        break;
 8003dd4:	e00d      	b.n	8003df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd6:	f7fe ffb3 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8003dda:	61f8      	str	r0, [r7, #28]
        break;
 8003ddc:	e009      	b.n	8003df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de2:	61fb      	str	r3, [r7, #28]
        break;
 8003de4:	e005      	b.n	8003df2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d077      	beq.n	8003ee8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005a      	lsls	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	441a      	add	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b0f      	cmp	r3, #15
 8003e12:	d916      	bls.n	8003e42 <UART_SetConfig+0x4a6>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1a:	d212      	bcs.n	8003e42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f023 030f 	bic.w	r3, r3, #15
 8003e24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	8afb      	ldrh	r3, [r7, #22]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	8afa      	ldrh	r2, [r7, #22]
 8003e3e:	60da      	str	r2, [r3, #12]
 8003e40:	e052      	b.n	8003ee8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e48:	e04e      	b.n	8003ee8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d827      	bhi.n	8003ea2 <UART_SetConfig+0x506>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <UART_SetConfig+0x4bc>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003ea3 	.word	0x08003ea3
 8003e68:	08003e93 	.word	0x08003e93
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003ea3 	.word	0x08003ea3
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e7c:	f7fe fff8 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 8003e80:	61f8      	str	r0, [r7, #28]
        break;
 8003e82:	e014      	b.n	8003eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7ff f80a 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 8003e88:	61f8      	str	r0, [r7, #28]
        break;
 8003e8a:	e010      	b.n	8003eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <UART_SetConfig+0x56c>)
 8003e8e:	61fb      	str	r3, [r7, #28]
        break;
 8003e90:	e00d      	b.n	8003eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7fe ff55 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8003e96:	61f8      	str	r0, [r7, #28]
        break;
 8003e98:	e009      	b.n	8003eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ea0:	e005      	b.n	8003eae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003eac:	bf00      	nop
    }

    if (pclk != 0U)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d019      	beq.n	8003ee8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	085a      	lsrs	r2, r3, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	d909      	bls.n	8003ee2 <UART_SetConfig+0x546>
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d205      	bcs.n	8003ee2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	e002      	b.n	8003ee8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ef4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3728      	adds	r7, #40	; 0x28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f02:	bf00      	nop
 8003f04:	40008000 	.word	0x40008000
 8003f08:	00f42400 	.word	0x00f42400

08003f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01a      	beq.n	8004022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400a:	d10a      	bne.n	8004022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b098      	sub	sp, #96	; 0x60
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004060:	f7fd f9e2 	bl	8001428 <HAL_GetTick>
 8004064:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b08      	cmp	r3, #8
 8004072:	d12e      	bne.n	80040d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407c:	2200      	movs	r2, #0
 800407e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f88c 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d021      	beq.n	80040d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a2:	653b      	str	r3, [r7, #80]	; 0x50
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
 80040ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e6      	bne.n	800408e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e062      	b.n	8004198 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d149      	bne.n	8004174 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	2200      	movs	r2, #0
 80040ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f856 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d03c      	beq.n	8004174 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	623b      	str	r3, [r7, #32]
   return(result);
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
 800411a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e6      	bne.n	80040fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60fb      	str	r3, [r7, #12]
   return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800414c:	61fa      	str	r2, [r7, #28]
 800414e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	69b9      	ldr	r1, [r7, #24]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	617b      	str	r3, [r7, #20]
   return(result);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e5      	bne.n	800412c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e011      	b.n	8004198 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3758      	adds	r7, #88	; 0x58
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b0:	e049      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d045      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fd f935 	bl	8001428 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e048      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d031      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d110      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2208      	movs	r2, #8
 80041f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f838 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2208      	movs	r2, #8
 8004202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e029      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004220:	d111      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800422a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f81e 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	429a      	cmp	r2, r3
 8004262:	d0a6      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800426e:	b480      	push	{r7}
 8004270:	b095      	sub	sp, #84	; 0x54
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800428a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004294:	643b      	str	r3, [r7, #64]	; 0x40
 8004296:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800429a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d118      	bne.n	8004316 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0310 	bic.w	r3, r3, #16
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	613b      	str	r3, [r7, #16]
   return(result);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	669a      	str	r2, [r3, #104]	; 0x68
}
 800432a:	bf00      	nop
 800432c:	3754      	adds	r7, #84	; 0x54
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <siprintf>:
 8004338:	b40e      	push	{r1, r2, r3}
 800433a:	b500      	push	{lr}
 800433c:	b09c      	sub	sp, #112	; 0x70
 800433e:	ab1d      	add	r3, sp, #116	; 0x74
 8004340:	9002      	str	r0, [sp, #8]
 8004342:	9006      	str	r0, [sp, #24]
 8004344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004348:	4809      	ldr	r0, [pc, #36]	; (8004370 <siprintf+0x38>)
 800434a:	9107      	str	r1, [sp, #28]
 800434c:	9104      	str	r1, [sp, #16]
 800434e:	4909      	ldr	r1, [pc, #36]	; (8004374 <siprintf+0x3c>)
 8004350:	f853 2b04 	ldr.w	r2, [r3], #4
 8004354:	9105      	str	r1, [sp, #20]
 8004356:	6800      	ldr	r0, [r0, #0]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	a902      	add	r1, sp, #8
 800435c:	f000 f992 	bl	8004684 <_svfiprintf_r>
 8004360:	9b02      	ldr	r3, [sp, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	b01c      	add	sp, #112	; 0x70
 8004368:	f85d eb04 	ldr.w	lr, [sp], #4
 800436c:	b003      	add	sp, #12
 800436e:	4770      	bx	lr
 8004370:	20000058 	.word	0x20000058
 8004374:	ffff0208 	.word	0xffff0208

08004378 <memset>:
 8004378:	4402      	add	r2, r0
 800437a:	4603      	mov	r3, r0
 800437c:	4293      	cmp	r3, r2
 800437e:	d100      	bne.n	8004382 <memset+0xa>
 8004380:	4770      	bx	lr
 8004382:	f803 1b01 	strb.w	r1, [r3], #1
 8004386:	e7f9      	b.n	800437c <memset+0x4>

08004388 <__errno>:
 8004388:	4b01      	ldr	r3, [pc, #4]	; (8004390 <__errno+0x8>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000058 	.word	0x20000058

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	; (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	; (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	; (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	; (80043d8 <__libc_init_array+0x44>)
 80043a8:	f000 fc6a 	bl	8004c80 <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08004d70 	.word	0x08004d70
 80043d0:	08004d70 	.word	0x08004d70
 80043d4:	08004d70 	.word	0x08004d70
 80043d8:	08004d74 	.word	0x08004d74

080043dc <__retarget_lock_acquire_recursive>:
 80043dc:	4770      	bx	lr

080043de <__retarget_lock_release_recursive>:
 80043de:	4770      	bx	lr

080043e0 <_free_r>:
 80043e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043e2:	2900      	cmp	r1, #0
 80043e4:	d044      	beq.n	8004470 <_free_r+0x90>
 80043e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ea:	9001      	str	r0, [sp, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f1a1 0404 	sub.w	r4, r1, #4
 80043f2:	bfb8      	it	lt
 80043f4:	18e4      	addlt	r4, r4, r3
 80043f6:	f000 f8df 	bl	80045b8 <__malloc_lock>
 80043fa:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <_free_r+0x94>)
 80043fc:	9801      	ldr	r0, [sp, #4]
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	b933      	cbnz	r3, 8004410 <_free_r+0x30>
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	6014      	str	r4, [r2, #0]
 8004406:	b003      	add	sp, #12
 8004408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800440c:	f000 b8da 	b.w	80045c4 <__malloc_unlock>
 8004410:	42a3      	cmp	r3, r4
 8004412:	d908      	bls.n	8004426 <_free_r+0x46>
 8004414:	6825      	ldr	r5, [r4, #0]
 8004416:	1961      	adds	r1, r4, r5
 8004418:	428b      	cmp	r3, r1
 800441a:	bf01      	itttt	eq
 800441c:	6819      	ldreq	r1, [r3, #0]
 800441e:	685b      	ldreq	r3, [r3, #4]
 8004420:	1949      	addeq	r1, r1, r5
 8004422:	6021      	streq	r1, [r4, #0]
 8004424:	e7ed      	b.n	8004402 <_free_r+0x22>
 8004426:	461a      	mov	r2, r3
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	b10b      	cbz	r3, 8004430 <_free_r+0x50>
 800442c:	42a3      	cmp	r3, r4
 800442e:	d9fa      	bls.n	8004426 <_free_r+0x46>
 8004430:	6811      	ldr	r1, [r2, #0]
 8004432:	1855      	adds	r5, r2, r1
 8004434:	42a5      	cmp	r5, r4
 8004436:	d10b      	bne.n	8004450 <_free_r+0x70>
 8004438:	6824      	ldr	r4, [r4, #0]
 800443a:	4421      	add	r1, r4
 800443c:	1854      	adds	r4, r2, r1
 800443e:	42a3      	cmp	r3, r4
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	d1e0      	bne.n	8004406 <_free_r+0x26>
 8004444:	681c      	ldr	r4, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	6053      	str	r3, [r2, #4]
 800444a:	440c      	add	r4, r1
 800444c:	6014      	str	r4, [r2, #0]
 800444e:	e7da      	b.n	8004406 <_free_r+0x26>
 8004450:	d902      	bls.n	8004458 <_free_r+0x78>
 8004452:	230c      	movs	r3, #12
 8004454:	6003      	str	r3, [r0, #0]
 8004456:	e7d6      	b.n	8004406 <_free_r+0x26>
 8004458:	6825      	ldr	r5, [r4, #0]
 800445a:	1961      	adds	r1, r4, r5
 800445c:	428b      	cmp	r3, r1
 800445e:	bf04      	itt	eq
 8004460:	6819      	ldreq	r1, [r3, #0]
 8004462:	685b      	ldreq	r3, [r3, #4]
 8004464:	6063      	str	r3, [r4, #4]
 8004466:	bf04      	itt	eq
 8004468:	1949      	addeq	r1, r1, r5
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	6054      	str	r4, [r2, #4]
 800446e:	e7ca      	b.n	8004406 <_free_r+0x26>
 8004470:	b003      	add	sp, #12
 8004472:	bd30      	pop	{r4, r5, pc}
 8004474:	200002a4 	.word	0x200002a4

08004478 <sbrk_aligned>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4e0e      	ldr	r6, [pc, #56]	; (80044b4 <sbrk_aligned+0x3c>)
 800447c:	460c      	mov	r4, r1
 800447e:	6831      	ldr	r1, [r6, #0]
 8004480:	4605      	mov	r5, r0
 8004482:	b911      	cbnz	r1, 800448a <sbrk_aligned+0x12>
 8004484:	f000 fba6 	bl	8004bd4 <_sbrk_r>
 8004488:	6030      	str	r0, [r6, #0]
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	f000 fba1 	bl	8004bd4 <_sbrk_r>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	d00a      	beq.n	80044ac <sbrk_aligned+0x34>
 8004496:	1cc4      	adds	r4, r0, #3
 8004498:	f024 0403 	bic.w	r4, r4, #3
 800449c:	42a0      	cmp	r0, r4
 800449e:	d007      	beq.n	80044b0 <sbrk_aligned+0x38>
 80044a0:	1a21      	subs	r1, r4, r0
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 fb96 	bl	8004bd4 <_sbrk_r>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d101      	bne.n	80044b0 <sbrk_aligned+0x38>
 80044ac:	f04f 34ff 	mov.w	r4, #4294967295
 80044b0:	4620      	mov	r0, r4
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	200002a8 	.word	0x200002a8

080044b8 <_malloc_r>:
 80044b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044bc:	1ccd      	adds	r5, r1, #3
 80044be:	f025 0503 	bic.w	r5, r5, #3
 80044c2:	3508      	adds	r5, #8
 80044c4:	2d0c      	cmp	r5, #12
 80044c6:	bf38      	it	cc
 80044c8:	250c      	movcc	r5, #12
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	4607      	mov	r7, r0
 80044ce:	db01      	blt.n	80044d4 <_malloc_r+0x1c>
 80044d0:	42a9      	cmp	r1, r5
 80044d2:	d905      	bls.n	80044e0 <_malloc_r+0x28>
 80044d4:	230c      	movs	r3, #12
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	2600      	movs	r6, #0
 80044da:	4630      	mov	r0, r6
 80044dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045b4 <_malloc_r+0xfc>
 80044e4:	f000 f868 	bl	80045b8 <__malloc_lock>
 80044e8:	f8d8 3000 	ldr.w	r3, [r8]
 80044ec:	461c      	mov	r4, r3
 80044ee:	bb5c      	cbnz	r4, 8004548 <_malloc_r+0x90>
 80044f0:	4629      	mov	r1, r5
 80044f2:	4638      	mov	r0, r7
 80044f4:	f7ff ffc0 	bl	8004478 <sbrk_aligned>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	4604      	mov	r4, r0
 80044fc:	d155      	bne.n	80045aa <_malloc_r+0xf2>
 80044fe:	f8d8 4000 	ldr.w	r4, [r8]
 8004502:	4626      	mov	r6, r4
 8004504:	2e00      	cmp	r6, #0
 8004506:	d145      	bne.n	8004594 <_malloc_r+0xdc>
 8004508:	2c00      	cmp	r4, #0
 800450a:	d048      	beq.n	800459e <_malloc_r+0xe6>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	4631      	mov	r1, r6
 8004510:	4638      	mov	r0, r7
 8004512:	eb04 0903 	add.w	r9, r4, r3
 8004516:	f000 fb5d 	bl	8004bd4 <_sbrk_r>
 800451a:	4581      	cmp	r9, r0
 800451c:	d13f      	bne.n	800459e <_malloc_r+0xe6>
 800451e:	6821      	ldr	r1, [r4, #0]
 8004520:	1a6d      	subs	r5, r5, r1
 8004522:	4629      	mov	r1, r5
 8004524:	4638      	mov	r0, r7
 8004526:	f7ff ffa7 	bl	8004478 <sbrk_aligned>
 800452a:	3001      	adds	r0, #1
 800452c:	d037      	beq.n	800459e <_malloc_r+0xe6>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	442b      	add	r3, r5
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	f8d8 3000 	ldr.w	r3, [r8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d038      	beq.n	80045ae <_malloc_r+0xf6>
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	42a2      	cmp	r2, r4
 8004540:	d12b      	bne.n	800459a <_malloc_r+0xe2>
 8004542:	2200      	movs	r2, #0
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	e00f      	b.n	8004568 <_malloc_r+0xb0>
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	1b52      	subs	r2, r2, r5
 800454c:	d41f      	bmi.n	800458e <_malloc_r+0xd6>
 800454e:	2a0b      	cmp	r2, #11
 8004550:	d917      	bls.n	8004582 <_malloc_r+0xca>
 8004552:	1961      	adds	r1, r4, r5
 8004554:	42a3      	cmp	r3, r4
 8004556:	6025      	str	r5, [r4, #0]
 8004558:	bf18      	it	ne
 800455a:	6059      	strne	r1, [r3, #4]
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	bf08      	it	eq
 8004560:	f8c8 1000 	streq.w	r1, [r8]
 8004564:	5162      	str	r2, [r4, r5]
 8004566:	604b      	str	r3, [r1, #4]
 8004568:	4638      	mov	r0, r7
 800456a:	f104 060b 	add.w	r6, r4, #11
 800456e:	f000 f829 	bl	80045c4 <__malloc_unlock>
 8004572:	f026 0607 	bic.w	r6, r6, #7
 8004576:	1d23      	adds	r3, r4, #4
 8004578:	1af2      	subs	r2, r6, r3
 800457a:	d0ae      	beq.n	80044da <_malloc_r+0x22>
 800457c:	1b9b      	subs	r3, r3, r6
 800457e:	50a3      	str	r3, [r4, r2]
 8004580:	e7ab      	b.n	80044da <_malloc_r+0x22>
 8004582:	42a3      	cmp	r3, r4
 8004584:	6862      	ldr	r2, [r4, #4]
 8004586:	d1dd      	bne.n	8004544 <_malloc_r+0x8c>
 8004588:	f8c8 2000 	str.w	r2, [r8]
 800458c:	e7ec      	b.n	8004568 <_malloc_r+0xb0>
 800458e:	4623      	mov	r3, r4
 8004590:	6864      	ldr	r4, [r4, #4]
 8004592:	e7ac      	b.n	80044ee <_malloc_r+0x36>
 8004594:	4634      	mov	r4, r6
 8004596:	6876      	ldr	r6, [r6, #4]
 8004598:	e7b4      	b.n	8004504 <_malloc_r+0x4c>
 800459a:	4613      	mov	r3, r2
 800459c:	e7cc      	b.n	8004538 <_malloc_r+0x80>
 800459e:	230c      	movs	r3, #12
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4638      	mov	r0, r7
 80045a4:	f000 f80e 	bl	80045c4 <__malloc_unlock>
 80045a8:	e797      	b.n	80044da <_malloc_r+0x22>
 80045aa:	6025      	str	r5, [r4, #0]
 80045ac:	e7dc      	b.n	8004568 <_malloc_r+0xb0>
 80045ae:	605b      	str	r3, [r3, #4]
 80045b0:	deff      	udf	#255	; 0xff
 80045b2:	bf00      	nop
 80045b4:	200002a4 	.word	0x200002a4

080045b8 <__malloc_lock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	; (80045c0 <__malloc_lock+0x8>)
 80045ba:	f7ff bf0f 	b.w	80043dc <__retarget_lock_acquire_recursive>
 80045be:	bf00      	nop
 80045c0:	200002a0 	.word	0x200002a0

080045c4 <__malloc_unlock>:
 80045c4:	4801      	ldr	r0, [pc, #4]	; (80045cc <__malloc_unlock+0x8>)
 80045c6:	f7ff bf0a 	b.w	80043de <__retarget_lock_release_recursive>
 80045ca:	bf00      	nop
 80045cc:	200002a0 	.word	0x200002a0

080045d0 <__ssputs_r>:
 80045d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d4:	688e      	ldr	r6, [r1, #8]
 80045d6:	461f      	mov	r7, r3
 80045d8:	42be      	cmp	r6, r7
 80045da:	680b      	ldr	r3, [r1, #0]
 80045dc:	4682      	mov	sl, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	4690      	mov	r8, r2
 80045e2:	d82c      	bhi.n	800463e <__ssputs_r+0x6e>
 80045e4:	898a      	ldrh	r2, [r1, #12]
 80045e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ea:	d026      	beq.n	800463a <__ssputs_r+0x6a>
 80045ec:	6965      	ldr	r5, [r4, #20]
 80045ee:	6909      	ldr	r1, [r1, #16]
 80045f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045f4:	eba3 0901 	sub.w	r9, r3, r1
 80045f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045fc:	1c7b      	adds	r3, r7, #1
 80045fe:	444b      	add	r3, r9
 8004600:	106d      	asrs	r5, r5, #1
 8004602:	429d      	cmp	r5, r3
 8004604:	bf38      	it	cc
 8004606:	461d      	movcc	r5, r3
 8004608:	0553      	lsls	r3, r2, #21
 800460a:	d527      	bpl.n	800465c <__ssputs_r+0x8c>
 800460c:	4629      	mov	r1, r5
 800460e:	f7ff ff53 	bl	80044b8 <_malloc_r>
 8004612:	4606      	mov	r6, r0
 8004614:	b360      	cbz	r0, 8004670 <__ssputs_r+0xa0>
 8004616:	6921      	ldr	r1, [r4, #16]
 8004618:	464a      	mov	r2, r9
 800461a:	f000 faeb 	bl	8004bf4 <memcpy>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	6126      	str	r6, [r4, #16]
 800462c:	6165      	str	r5, [r4, #20]
 800462e:	444e      	add	r6, r9
 8004630:	eba5 0509 	sub.w	r5, r5, r9
 8004634:	6026      	str	r6, [r4, #0]
 8004636:	60a5      	str	r5, [r4, #8]
 8004638:	463e      	mov	r6, r7
 800463a:	42be      	cmp	r6, r7
 800463c:	d900      	bls.n	8004640 <__ssputs_r+0x70>
 800463e:	463e      	mov	r6, r7
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	4632      	mov	r2, r6
 8004644:	4641      	mov	r1, r8
 8004646:	f000 faab 	bl	8004ba0 <memmove>
 800464a:	68a3      	ldr	r3, [r4, #8]
 800464c:	1b9b      	subs	r3, r3, r6
 800464e:	60a3      	str	r3, [r4, #8]
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	4433      	add	r3, r6
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	2000      	movs	r0, #0
 8004658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465c:	462a      	mov	r2, r5
 800465e:	f000 fad7 	bl	8004c10 <_realloc_r>
 8004662:	4606      	mov	r6, r0
 8004664:	2800      	cmp	r0, #0
 8004666:	d1e0      	bne.n	800462a <__ssputs_r+0x5a>
 8004668:	6921      	ldr	r1, [r4, #16]
 800466a:	4650      	mov	r0, sl
 800466c:	f7ff feb8 	bl	80043e0 <_free_r>
 8004670:	230c      	movs	r3, #12
 8004672:	f8ca 3000 	str.w	r3, [sl]
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	f04f 30ff 	mov.w	r0, #4294967295
 8004682:	e7e9      	b.n	8004658 <__ssputs_r+0x88>

08004684 <_svfiprintf_r>:
 8004684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004688:	4698      	mov	r8, r3
 800468a:	898b      	ldrh	r3, [r1, #12]
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	b09d      	sub	sp, #116	; 0x74
 8004690:	4607      	mov	r7, r0
 8004692:	460d      	mov	r5, r1
 8004694:	4614      	mov	r4, r2
 8004696:	d50e      	bpl.n	80046b6 <_svfiprintf_r+0x32>
 8004698:	690b      	ldr	r3, [r1, #16]
 800469a:	b963      	cbnz	r3, 80046b6 <_svfiprintf_r+0x32>
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	f7ff ff0b 	bl	80044b8 <_malloc_r>
 80046a2:	6028      	str	r0, [r5, #0]
 80046a4:	6128      	str	r0, [r5, #16]
 80046a6:	b920      	cbnz	r0, 80046b2 <_svfiprintf_r+0x2e>
 80046a8:	230c      	movs	r3, #12
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	e0d0      	b.n	8004854 <_svfiprintf_r+0x1d0>
 80046b2:	2340      	movs	r3, #64	; 0x40
 80046b4:	616b      	str	r3, [r5, #20]
 80046b6:	2300      	movs	r3, #0
 80046b8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ba:	2320      	movs	r3, #32
 80046bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046c4:	2330      	movs	r3, #48	; 0x30
 80046c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800486c <_svfiprintf_r+0x1e8>
 80046ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ce:	f04f 0901 	mov.w	r9, #1
 80046d2:	4623      	mov	r3, r4
 80046d4:	469a      	mov	sl, r3
 80046d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046da:	b10a      	cbz	r2, 80046e0 <_svfiprintf_r+0x5c>
 80046dc:	2a25      	cmp	r2, #37	; 0x25
 80046de:	d1f9      	bne.n	80046d4 <_svfiprintf_r+0x50>
 80046e0:	ebba 0b04 	subs.w	fp, sl, r4
 80046e4:	d00b      	beq.n	80046fe <_svfiprintf_r+0x7a>
 80046e6:	465b      	mov	r3, fp
 80046e8:	4622      	mov	r2, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ff6f 	bl	80045d0 <__ssputs_r>
 80046f2:	3001      	adds	r0, #1
 80046f4:	f000 80a9 	beq.w	800484a <_svfiprintf_r+0x1c6>
 80046f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046fa:	445a      	add	r2, fp
 80046fc:	9209      	str	r2, [sp, #36]	; 0x24
 80046fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80a1 	beq.w	800484a <_svfiprintf_r+0x1c6>
 8004708:	2300      	movs	r3, #0
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004712:	f10a 0a01 	add.w	sl, sl, #1
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	9307      	str	r3, [sp, #28]
 800471a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800471e:	931a      	str	r3, [sp, #104]	; 0x68
 8004720:	4654      	mov	r4, sl
 8004722:	2205      	movs	r2, #5
 8004724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004728:	4850      	ldr	r0, [pc, #320]	; (800486c <_svfiprintf_r+0x1e8>)
 800472a:	f7fb fd51 	bl	80001d0 <memchr>
 800472e:	9a04      	ldr	r2, [sp, #16]
 8004730:	b9d8      	cbnz	r0, 800476a <_svfiprintf_r+0xe6>
 8004732:	06d0      	lsls	r0, r2, #27
 8004734:	bf44      	itt	mi
 8004736:	2320      	movmi	r3, #32
 8004738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800473c:	0711      	lsls	r1, r2, #28
 800473e:	bf44      	itt	mi
 8004740:	232b      	movmi	r3, #43	; 0x2b
 8004742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004746:	f89a 3000 	ldrb.w	r3, [sl]
 800474a:	2b2a      	cmp	r3, #42	; 0x2a
 800474c:	d015      	beq.n	800477a <_svfiprintf_r+0xf6>
 800474e:	9a07      	ldr	r2, [sp, #28]
 8004750:	4654      	mov	r4, sl
 8004752:	2000      	movs	r0, #0
 8004754:	f04f 0c0a 	mov.w	ip, #10
 8004758:	4621      	mov	r1, r4
 800475a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475e:	3b30      	subs	r3, #48	; 0x30
 8004760:	2b09      	cmp	r3, #9
 8004762:	d94d      	bls.n	8004800 <_svfiprintf_r+0x17c>
 8004764:	b1b0      	cbz	r0, 8004794 <_svfiprintf_r+0x110>
 8004766:	9207      	str	r2, [sp, #28]
 8004768:	e014      	b.n	8004794 <_svfiprintf_r+0x110>
 800476a:	eba0 0308 	sub.w	r3, r0, r8
 800476e:	fa09 f303 	lsl.w	r3, r9, r3
 8004772:	4313      	orrs	r3, r2
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	46a2      	mov	sl, r4
 8004778:	e7d2      	b.n	8004720 <_svfiprintf_r+0x9c>
 800477a:	9b03      	ldr	r3, [sp, #12]
 800477c:	1d19      	adds	r1, r3, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	9103      	str	r1, [sp, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfbb      	ittet	lt
 8004786:	425b      	neglt	r3, r3
 8004788:	f042 0202 	orrlt.w	r2, r2, #2
 800478c:	9307      	strge	r3, [sp, #28]
 800478e:	9307      	strlt	r3, [sp, #28]
 8004790:	bfb8      	it	lt
 8004792:	9204      	strlt	r2, [sp, #16]
 8004794:	7823      	ldrb	r3, [r4, #0]
 8004796:	2b2e      	cmp	r3, #46	; 0x2e
 8004798:	d10c      	bne.n	80047b4 <_svfiprintf_r+0x130>
 800479a:	7863      	ldrb	r3, [r4, #1]
 800479c:	2b2a      	cmp	r3, #42	; 0x2a
 800479e:	d134      	bne.n	800480a <_svfiprintf_r+0x186>
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	1d1a      	adds	r2, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	9203      	str	r2, [sp, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bfb8      	it	lt
 80047ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80047b0:	3402      	adds	r4, #2
 80047b2:	9305      	str	r3, [sp, #20]
 80047b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800487c <_svfiprintf_r+0x1f8>
 80047b8:	7821      	ldrb	r1, [r4, #0]
 80047ba:	2203      	movs	r2, #3
 80047bc:	4650      	mov	r0, sl
 80047be:	f7fb fd07 	bl	80001d0 <memchr>
 80047c2:	b138      	cbz	r0, 80047d4 <_svfiprintf_r+0x150>
 80047c4:	9b04      	ldr	r3, [sp, #16]
 80047c6:	eba0 000a 	sub.w	r0, r0, sl
 80047ca:	2240      	movs	r2, #64	; 0x40
 80047cc:	4082      	lsls	r2, r0
 80047ce:	4313      	orrs	r3, r2
 80047d0:	3401      	adds	r4, #1
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d8:	4825      	ldr	r0, [pc, #148]	; (8004870 <_svfiprintf_r+0x1ec>)
 80047da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047de:	2206      	movs	r2, #6
 80047e0:	f7fb fcf6 	bl	80001d0 <memchr>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d038      	beq.n	800485a <_svfiprintf_r+0x1d6>
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <_svfiprintf_r+0x1f0>)
 80047ea:	bb1b      	cbnz	r3, 8004834 <_svfiprintf_r+0x1b0>
 80047ec:	9b03      	ldr	r3, [sp, #12]
 80047ee:	3307      	adds	r3, #7
 80047f0:	f023 0307 	bic.w	r3, r3, #7
 80047f4:	3308      	adds	r3, #8
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fa:	4433      	add	r3, r6
 80047fc:	9309      	str	r3, [sp, #36]	; 0x24
 80047fe:	e768      	b.n	80046d2 <_svfiprintf_r+0x4e>
 8004800:	fb0c 3202 	mla	r2, ip, r2, r3
 8004804:	460c      	mov	r4, r1
 8004806:	2001      	movs	r0, #1
 8004808:	e7a6      	b.n	8004758 <_svfiprintf_r+0xd4>
 800480a:	2300      	movs	r3, #0
 800480c:	3401      	adds	r4, #1
 800480e:	9305      	str	r3, [sp, #20]
 8004810:	4619      	mov	r1, r3
 8004812:	f04f 0c0a 	mov.w	ip, #10
 8004816:	4620      	mov	r0, r4
 8004818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800481c:	3a30      	subs	r2, #48	; 0x30
 800481e:	2a09      	cmp	r2, #9
 8004820:	d903      	bls.n	800482a <_svfiprintf_r+0x1a6>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0c6      	beq.n	80047b4 <_svfiprintf_r+0x130>
 8004826:	9105      	str	r1, [sp, #20]
 8004828:	e7c4      	b.n	80047b4 <_svfiprintf_r+0x130>
 800482a:	fb0c 2101 	mla	r1, ip, r1, r2
 800482e:	4604      	mov	r4, r0
 8004830:	2301      	movs	r3, #1
 8004832:	e7f0      	b.n	8004816 <_svfiprintf_r+0x192>
 8004834:	ab03      	add	r3, sp, #12
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	462a      	mov	r2, r5
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <_svfiprintf_r+0x1f4>)
 800483c:	a904      	add	r1, sp, #16
 800483e:	4638      	mov	r0, r7
 8004840:	f3af 8000 	nop.w
 8004844:	1c42      	adds	r2, r0, #1
 8004846:	4606      	mov	r6, r0
 8004848:	d1d6      	bne.n	80047f8 <_svfiprintf_r+0x174>
 800484a:	89ab      	ldrh	r3, [r5, #12]
 800484c:	065b      	lsls	r3, r3, #25
 800484e:	f53f af2d 	bmi.w	80046ac <_svfiprintf_r+0x28>
 8004852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004854:	b01d      	add	sp, #116	; 0x74
 8004856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485a:	ab03      	add	r3, sp, #12
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	462a      	mov	r2, r5
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <_svfiprintf_r+0x1f4>)
 8004862:	a904      	add	r1, sp, #16
 8004864:	4638      	mov	r0, r7
 8004866:	f000 f879 	bl	800495c <_printf_i>
 800486a:	e7eb      	b.n	8004844 <_svfiprintf_r+0x1c0>
 800486c:	08004d34 	.word	0x08004d34
 8004870:	08004d3e 	.word	0x08004d3e
 8004874:	00000000 	.word	0x00000000
 8004878:	080045d1 	.word	0x080045d1
 800487c:	08004d3a 	.word	0x08004d3a

08004880 <_printf_common>:
 8004880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	4616      	mov	r6, r2
 8004886:	4699      	mov	r9, r3
 8004888:	688a      	ldr	r2, [r1, #8]
 800488a:	690b      	ldr	r3, [r1, #16]
 800488c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004890:	4293      	cmp	r3, r2
 8004892:	bfb8      	it	lt
 8004894:	4613      	movlt	r3, r2
 8004896:	6033      	str	r3, [r6, #0]
 8004898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800489c:	4607      	mov	r7, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	b10a      	cbz	r2, 80048a6 <_printf_common+0x26>
 80048a2:	3301      	adds	r3, #1
 80048a4:	6033      	str	r3, [r6, #0]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	0699      	lsls	r1, r3, #26
 80048aa:	bf42      	ittt	mi
 80048ac:	6833      	ldrmi	r3, [r6, #0]
 80048ae:	3302      	addmi	r3, #2
 80048b0:	6033      	strmi	r3, [r6, #0]
 80048b2:	6825      	ldr	r5, [r4, #0]
 80048b4:	f015 0506 	ands.w	r5, r5, #6
 80048b8:	d106      	bne.n	80048c8 <_printf_common+0x48>
 80048ba:	f104 0a19 	add.w	sl, r4, #25
 80048be:	68e3      	ldr	r3, [r4, #12]
 80048c0:	6832      	ldr	r2, [r6, #0]
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	42ab      	cmp	r3, r5
 80048c6:	dc26      	bgt.n	8004916 <_printf_common+0x96>
 80048c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048cc:	1e13      	subs	r3, r2, #0
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	bf18      	it	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	0692      	lsls	r2, r2, #26
 80048d6:	d42b      	bmi.n	8004930 <_printf_common+0xb0>
 80048d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048dc:	4649      	mov	r1, r9
 80048de:	4638      	mov	r0, r7
 80048e0:	47c0      	blx	r8
 80048e2:	3001      	adds	r0, #1
 80048e4:	d01e      	beq.n	8004924 <_printf_common+0xa4>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	6922      	ldr	r2, [r4, #16]
 80048ea:	f003 0306 	and.w	r3, r3, #6
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	bf02      	ittt	eq
 80048f2:	68e5      	ldreq	r5, [r4, #12]
 80048f4:	6833      	ldreq	r3, [r6, #0]
 80048f6:	1aed      	subeq	r5, r5, r3
 80048f8:	68a3      	ldr	r3, [r4, #8]
 80048fa:	bf0c      	ite	eq
 80048fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004900:	2500      	movne	r5, #0
 8004902:	4293      	cmp	r3, r2
 8004904:	bfc4      	itt	gt
 8004906:	1a9b      	subgt	r3, r3, r2
 8004908:	18ed      	addgt	r5, r5, r3
 800490a:	2600      	movs	r6, #0
 800490c:	341a      	adds	r4, #26
 800490e:	42b5      	cmp	r5, r6
 8004910:	d11a      	bne.n	8004948 <_printf_common+0xc8>
 8004912:	2000      	movs	r0, #0
 8004914:	e008      	b.n	8004928 <_printf_common+0xa8>
 8004916:	2301      	movs	r3, #1
 8004918:	4652      	mov	r2, sl
 800491a:	4649      	mov	r1, r9
 800491c:	4638      	mov	r0, r7
 800491e:	47c0      	blx	r8
 8004920:	3001      	adds	r0, #1
 8004922:	d103      	bne.n	800492c <_printf_common+0xac>
 8004924:	f04f 30ff 	mov.w	r0, #4294967295
 8004928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492c:	3501      	adds	r5, #1
 800492e:	e7c6      	b.n	80048be <_printf_common+0x3e>
 8004930:	18e1      	adds	r1, r4, r3
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	2030      	movs	r0, #48	; 0x30
 8004936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800493a:	4422      	add	r2, r4
 800493c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004944:	3302      	adds	r3, #2
 8004946:	e7c7      	b.n	80048d8 <_printf_common+0x58>
 8004948:	2301      	movs	r3, #1
 800494a:	4622      	mov	r2, r4
 800494c:	4649      	mov	r1, r9
 800494e:	4638      	mov	r0, r7
 8004950:	47c0      	blx	r8
 8004952:	3001      	adds	r0, #1
 8004954:	d0e6      	beq.n	8004924 <_printf_common+0xa4>
 8004956:	3601      	adds	r6, #1
 8004958:	e7d9      	b.n	800490e <_printf_common+0x8e>
	...

0800495c <_printf_i>:
 800495c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004960:	7e0f      	ldrb	r7, [r1, #24]
 8004962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004964:	2f78      	cmp	r7, #120	; 0x78
 8004966:	4691      	mov	r9, r2
 8004968:	4680      	mov	r8, r0
 800496a:	460c      	mov	r4, r1
 800496c:	469a      	mov	sl, r3
 800496e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004972:	d807      	bhi.n	8004984 <_printf_i+0x28>
 8004974:	2f62      	cmp	r7, #98	; 0x62
 8004976:	d80a      	bhi.n	800498e <_printf_i+0x32>
 8004978:	2f00      	cmp	r7, #0
 800497a:	f000 80d4 	beq.w	8004b26 <_printf_i+0x1ca>
 800497e:	2f58      	cmp	r7, #88	; 0x58
 8004980:	f000 80c0 	beq.w	8004b04 <_printf_i+0x1a8>
 8004984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800498c:	e03a      	b.n	8004a04 <_printf_i+0xa8>
 800498e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004992:	2b15      	cmp	r3, #21
 8004994:	d8f6      	bhi.n	8004984 <_printf_i+0x28>
 8004996:	a101      	add	r1, pc, #4	; (adr r1, 800499c <_printf_i+0x40>)
 8004998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800499c:	080049f5 	.word	0x080049f5
 80049a0:	08004a09 	.word	0x08004a09
 80049a4:	08004985 	.word	0x08004985
 80049a8:	08004985 	.word	0x08004985
 80049ac:	08004985 	.word	0x08004985
 80049b0:	08004985 	.word	0x08004985
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004985 	.word	0x08004985
 80049bc:	08004985 	.word	0x08004985
 80049c0:	08004985 	.word	0x08004985
 80049c4:	08004985 	.word	0x08004985
 80049c8:	08004b0d 	.word	0x08004b0d
 80049cc:	08004a35 	.word	0x08004a35
 80049d0:	08004ac7 	.word	0x08004ac7
 80049d4:	08004985 	.word	0x08004985
 80049d8:	08004985 	.word	0x08004985
 80049dc:	08004b2f 	.word	0x08004b2f
 80049e0:	08004985 	.word	0x08004985
 80049e4:	08004a35 	.word	0x08004a35
 80049e8:	08004985 	.word	0x08004985
 80049ec:	08004985 	.word	0x08004985
 80049f0:	08004acf 	.word	0x08004acf
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	602a      	str	r2, [r5, #0]
 80049fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a04:	2301      	movs	r3, #1
 8004a06:	e09f      	b.n	8004b48 <_printf_i+0x1ec>
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	0607      	lsls	r7, r0, #24
 8004a0e:	f103 0104 	add.w	r1, r3, #4
 8004a12:	6029      	str	r1, [r5, #0]
 8004a14:	d501      	bpl.n	8004a1a <_printf_i+0xbe>
 8004a16:	681e      	ldr	r6, [r3, #0]
 8004a18:	e003      	b.n	8004a22 <_printf_i+0xc6>
 8004a1a:	0646      	lsls	r6, r0, #25
 8004a1c:	d5fb      	bpl.n	8004a16 <_printf_i+0xba>
 8004a1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a22:	2e00      	cmp	r6, #0
 8004a24:	da03      	bge.n	8004a2e <_printf_i+0xd2>
 8004a26:	232d      	movs	r3, #45	; 0x2d
 8004a28:	4276      	negs	r6, r6
 8004a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2e:	485a      	ldr	r0, [pc, #360]	; (8004b98 <_printf_i+0x23c>)
 8004a30:	230a      	movs	r3, #10
 8004a32:	e012      	b.n	8004a5a <_printf_i+0xfe>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	1d19      	adds	r1, r3, #4
 8004a3a:	6029      	str	r1, [r5, #0]
 8004a3c:	0605      	lsls	r5, r0, #24
 8004a3e:	d501      	bpl.n	8004a44 <_printf_i+0xe8>
 8004a40:	681e      	ldr	r6, [r3, #0]
 8004a42:	e002      	b.n	8004a4a <_printf_i+0xee>
 8004a44:	0641      	lsls	r1, r0, #25
 8004a46:	d5fb      	bpl.n	8004a40 <_printf_i+0xe4>
 8004a48:	881e      	ldrh	r6, [r3, #0]
 8004a4a:	4853      	ldr	r0, [pc, #332]	; (8004b98 <_printf_i+0x23c>)
 8004a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a4e:	bf0c      	ite	eq
 8004a50:	2308      	moveq	r3, #8
 8004a52:	230a      	movne	r3, #10
 8004a54:	2100      	movs	r1, #0
 8004a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a5a:	6865      	ldr	r5, [r4, #4]
 8004a5c:	60a5      	str	r5, [r4, #8]
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	bfa2      	ittt	ge
 8004a62:	6821      	ldrge	r1, [r4, #0]
 8004a64:	f021 0104 	bicge.w	r1, r1, #4
 8004a68:	6021      	strge	r1, [r4, #0]
 8004a6a:	b90e      	cbnz	r6, 8004a70 <_printf_i+0x114>
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	d04b      	beq.n	8004b08 <_printf_i+0x1ac>
 8004a70:	4615      	mov	r5, r2
 8004a72:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a76:	fb03 6711 	mls	r7, r3, r1, r6
 8004a7a:	5dc7      	ldrb	r7, [r0, r7]
 8004a7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a80:	4637      	mov	r7, r6
 8004a82:	42bb      	cmp	r3, r7
 8004a84:	460e      	mov	r6, r1
 8004a86:	d9f4      	bls.n	8004a72 <_printf_i+0x116>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d10b      	bne.n	8004aa4 <_printf_i+0x148>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	07de      	lsls	r6, r3, #31
 8004a90:	d508      	bpl.n	8004aa4 <_printf_i+0x148>
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6861      	ldr	r1, [r4, #4]
 8004a96:	4299      	cmp	r1, r3
 8004a98:	bfde      	ittt	le
 8004a9a:	2330      	movle	r3, #48	; 0x30
 8004a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aa4:	1b52      	subs	r2, r2, r5
 8004aa6:	6122      	str	r2, [r4, #16]
 8004aa8:	f8cd a000 	str.w	sl, [sp]
 8004aac:	464b      	mov	r3, r9
 8004aae:	aa03      	add	r2, sp, #12
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	f7ff fee4 	bl	8004880 <_printf_common>
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d14a      	bne.n	8004b52 <_printf_i+0x1f6>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	b004      	add	sp, #16
 8004ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f043 0320 	orr.w	r3, r3, #32
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	4833      	ldr	r0, [pc, #204]	; (8004b9c <_printf_i+0x240>)
 8004ad0:	2778      	movs	r7, #120	; 0x78
 8004ad2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	6829      	ldr	r1, [r5, #0]
 8004ada:	061f      	lsls	r7, r3, #24
 8004adc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ae0:	d402      	bmi.n	8004ae8 <_printf_i+0x18c>
 8004ae2:	065f      	lsls	r7, r3, #25
 8004ae4:	bf48      	it	mi
 8004ae6:	b2b6      	uxthmi	r6, r6
 8004ae8:	07df      	lsls	r7, r3, #31
 8004aea:	bf48      	it	mi
 8004aec:	f043 0320 	orrmi.w	r3, r3, #32
 8004af0:	6029      	str	r1, [r5, #0]
 8004af2:	bf48      	it	mi
 8004af4:	6023      	strmi	r3, [r4, #0]
 8004af6:	b91e      	cbnz	r6, 8004b00 <_printf_i+0x1a4>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	2310      	movs	r3, #16
 8004b02:	e7a7      	b.n	8004a54 <_printf_i+0xf8>
 8004b04:	4824      	ldr	r0, [pc, #144]	; (8004b98 <_printf_i+0x23c>)
 8004b06:	e7e4      	b.n	8004ad2 <_printf_i+0x176>
 8004b08:	4615      	mov	r5, r2
 8004b0a:	e7bd      	b.n	8004a88 <_printf_i+0x12c>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	6826      	ldr	r6, [r4, #0]
 8004b10:	6961      	ldr	r1, [r4, #20]
 8004b12:	1d18      	adds	r0, r3, #4
 8004b14:	6028      	str	r0, [r5, #0]
 8004b16:	0635      	lsls	r5, r6, #24
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	d501      	bpl.n	8004b20 <_printf_i+0x1c4>
 8004b1c:	6019      	str	r1, [r3, #0]
 8004b1e:	e002      	b.n	8004b26 <_printf_i+0x1ca>
 8004b20:	0670      	lsls	r0, r6, #25
 8004b22:	d5fb      	bpl.n	8004b1c <_printf_i+0x1c0>
 8004b24:	8019      	strh	r1, [r3, #0]
 8004b26:	2300      	movs	r3, #0
 8004b28:	6123      	str	r3, [r4, #16]
 8004b2a:	4615      	mov	r5, r2
 8004b2c:	e7bc      	b.n	8004aa8 <_printf_i+0x14c>
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	1d1a      	adds	r2, r3, #4
 8004b32:	602a      	str	r2, [r5, #0]
 8004b34:	681d      	ldr	r5, [r3, #0]
 8004b36:	6862      	ldr	r2, [r4, #4]
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f7fb fb48 	bl	80001d0 <memchr>
 8004b40:	b108      	cbz	r0, 8004b46 <_printf_i+0x1ea>
 8004b42:	1b40      	subs	r0, r0, r5
 8004b44:	6060      	str	r0, [r4, #4]
 8004b46:	6863      	ldr	r3, [r4, #4]
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b50:	e7aa      	b.n	8004aa8 <_printf_i+0x14c>
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	462a      	mov	r2, r5
 8004b56:	4649      	mov	r1, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	47d0      	blx	sl
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d0ad      	beq.n	8004abc <_printf_i+0x160>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	079b      	lsls	r3, r3, #30
 8004b64:	d413      	bmi.n	8004b8e <_printf_i+0x232>
 8004b66:	68e0      	ldr	r0, [r4, #12]
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	bfb8      	it	lt
 8004b6e:	4618      	movlt	r0, r3
 8004b70:	e7a6      	b.n	8004ac0 <_printf_i+0x164>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4632      	mov	r2, r6
 8004b76:	4649      	mov	r1, r9
 8004b78:	4640      	mov	r0, r8
 8004b7a:	47d0      	blx	sl
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d09d      	beq.n	8004abc <_printf_i+0x160>
 8004b80:	3501      	adds	r5, #1
 8004b82:	68e3      	ldr	r3, [r4, #12]
 8004b84:	9903      	ldr	r1, [sp, #12]
 8004b86:	1a5b      	subs	r3, r3, r1
 8004b88:	42ab      	cmp	r3, r5
 8004b8a:	dcf2      	bgt.n	8004b72 <_printf_i+0x216>
 8004b8c:	e7eb      	b.n	8004b66 <_printf_i+0x20a>
 8004b8e:	2500      	movs	r5, #0
 8004b90:	f104 0619 	add.w	r6, r4, #25
 8004b94:	e7f5      	b.n	8004b82 <_printf_i+0x226>
 8004b96:	bf00      	nop
 8004b98:	08004d45 	.word	0x08004d45
 8004b9c:	08004d56 	.word	0x08004d56

08004ba0 <memmove>:
 8004ba0:	4288      	cmp	r0, r1
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	eb01 0402 	add.w	r4, r1, r2
 8004ba8:	d902      	bls.n	8004bb0 <memmove+0x10>
 8004baa:	4284      	cmp	r4, r0
 8004bac:	4623      	mov	r3, r4
 8004bae:	d807      	bhi.n	8004bc0 <memmove+0x20>
 8004bb0:	1e43      	subs	r3, r0, #1
 8004bb2:	42a1      	cmp	r1, r4
 8004bb4:	d008      	beq.n	8004bc8 <memmove+0x28>
 8004bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bbe:	e7f8      	b.n	8004bb2 <memmove+0x12>
 8004bc0:	4402      	add	r2, r0
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	428a      	cmp	r2, r1
 8004bc6:	d100      	bne.n	8004bca <memmove+0x2a>
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bd2:	e7f7      	b.n	8004bc4 <memmove+0x24>

08004bd4 <_sbrk_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d06      	ldr	r5, [pc, #24]	; (8004bf0 <_sbrk_r+0x1c>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fc fb40 	bl	8001264 <_sbrk>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_sbrk_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_sbrk_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	2000029c 	.word	0x2000029c

08004bf4 <memcpy>:
 8004bf4:	440a      	add	r2, r1
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bfc:	d100      	bne.n	8004c00 <memcpy+0xc>
 8004bfe:	4770      	bx	lr
 8004c00:	b510      	push	{r4, lr}
 8004c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	d1f9      	bne.n	8004c02 <memcpy+0xe>
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <_realloc_r>:
 8004c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c14:	4680      	mov	r8, r0
 8004c16:	4614      	mov	r4, r2
 8004c18:	460e      	mov	r6, r1
 8004c1a:	b921      	cbnz	r1, 8004c26 <_realloc_r+0x16>
 8004c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	4611      	mov	r1, r2
 8004c22:	f7ff bc49 	b.w	80044b8 <_malloc_r>
 8004c26:	b92a      	cbnz	r2, 8004c34 <_realloc_r+0x24>
 8004c28:	f7ff fbda 	bl	80043e0 <_free_r>
 8004c2c:	4625      	mov	r5, r4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c34:	f000 f81b 	bl	8004c6e <_malloc_usable_size_r>
 8004c38:	4284      	cmp	r4, r0
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	d802      	bhi.n	8004c44 <_realloc_r+0x34>
 8004c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c42:	d812      	bhi.n	8004c6a <_realloc_r+0x5a>
 8004c44:	4621      	mov	r1, r4
 8004c46:	4640      	mov	r0, r8
 8004c48:	f7ff fc36 	bl	80044b8 <_malloc_r>
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d0ed      	beq.n	8004c2e <_realloc_r+0x1e>
 8004c52:	42bc      	cmp	r4, r7
 8004c54:	4622      	mov	r2, r4
 8004c56:	4631      	mov	r1, r6
 8004c58:	bf28      	it	cs
 8004c5a:	463a      	movcs	r2, r7
 8004c5c:	f7ff ffca 	bl	8004bf4 <memcpy>
 8004c60:	4631      	mov	r1, r6
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7ff fbbc 	bl	80043e0 <_free_r>
 8004c68:	e7e1      	b.n	8004c2e <_realloc_r+0x1e>
 8004c6a:	4635      	mov	r5, r6
 8004c6c:	e7df      	b.n	8004c2e <_realloc_r+0x1e>

08004c6e <_malloc_usable_size_r>:
 8004c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c72:	1f18      	subs	r0, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bfbc      	itt	lt
 8004c78:	580b      	ldrlt	r3, [r1, r0]
 8004c7a:	18c0      	addlt	r0, r0, r3
 8004c7c:	4770      	bx	lr
	...

08004c80 <_init>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr

08004c8c <_fini>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr
